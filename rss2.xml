<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>荒古遗迹</title>
    <link>http://raint9.tk/</link>
    
    <atom:link href="http://raint9.tk/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>平凡的脚步也可以走出伟大的行程</description>
    <pubDate>Thu, 11 Mar 2021 17:02:59 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Java核心类(补)</title>
      <link>http://raint9.tk/2021/03/12/Java-eclipse%E5%AE%89%E8%A3%85/</link>
      <guid>http://raint9.tk/2021/03/12/Java-eclipse%E5%AE%89%E8%A3%85/</guid>
      <pubDate>Thu, 11 Mar 2021 16:58:10 GMT</pubDate>
      
      <description>一篇关于下载并安装Java开源IDE软件eclipse的教程</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="eclipse的安装"><a href="#eclipse的安装" class="headerlink" title="eclipse的安装"></a>eclipse的安装</h1><h3 id="一-eclipse下载"><a href="#一-eclipse下载" class="headerlink" title="一.eclipse下载"></a>一.eclipse下载</h3><p><a href="https://www.eclipse.org/downloads/packages/">官网下载地址</a><br>找到第一个区域：Eclipse IDE Java Developers<br>1.根据自己电脑的操作系统选择下载，例如Windows下载点击右边的<strong>Windows x86_64</strong>。</p><p>2.进入后别急着下载，点击<strong>Select Another Mirror</strong>去更换下载镜像源找到China开头的并点击(如果你不想下载极慢的话请不要忽略这一步，具体原因因不可抗力不可说)</p><h3 id="二-eclipse的安装与配置"><a href="#二-eclipse的安装与配置" class="headerlink" title="二.eclipse的安装与配置"></a>二.eclipse的安装与配置</h3><p>1.下载完得到压缩包，解压到你想解压的地方，那将是你的软件的存放地点。</p><p>2.(选)双击进入文件夹,给<strong>eclipse.exe</strong>创建桌面快捷方式,方便下次打开</p><p>3.双击eclipse.exe运行，然后设置workspace的路径，这将是你以后项目的存放空间。</p><p>4.(选)创建项目后，记得把jdk换成jdk8,也就是你安装后的jdk版本。</p><p>5.(选)你可以给软件进行汉化</p><ul><li>点击<strong>help</strong>&gt;&gt;<strong>Install New Software</strong></li><li>进入<a href="http://www.eclipse.org/babel/">语言包官网</a>，点击Download</li><li>复制<strong>Babel Language Pack Update Site for 2020-12</strong>的链接</li><li>点击<strong>Add</strong>,把复制好的链接粘贴到第二行Location里，&gt;&gt; OK</li><li>此时看到“Pending…”即正在等待中，用户等待片刻便会看到软件检索到的语言包列表，下拉垂直滚动条，选择“for eclipse”下的Chinese Simplified(简体中文)包，点击“next”按钮进入下一步。</li><li>勾选第一个“I accept…”单选框，点击“Finish”按钮完成设置。</li><li>之后，弹出“正在安装”窗体，用户等待片刻后，在弹出的“Security Warning”窗体中点击“OK”按钮，之后在弹出的又一窗体“Software Updates”中点击“Restart Now”按钮完成语言包的安装并重启eclipse。</li><li>重启eclipse &gt;&gt; 完成</li></ul>]]></content:encoded>
      
      
      
      <category domain="http://raint9.tk/tags/Java/">Java</category>
      
      <category domain="http://raint9.tk/tags/Raint/">Raint</category>
      
      
      <comments>http://raint9.tk/2021/03/12/Java-eclipse%E5%AE%89%E8%A3%85/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java核心类(补)</title>
      <link>http://raint9.tk/2021/03/12/Java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <guid>http://raint9.tk/2021/03/12/Java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <pubDate>Thu, 11 Mar 2021 16:58:10 GMT</pubDate>
      
      <description>一篇基于jdk1.8来配置java开发环境的教程</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="jdk，jre与jvm"><a href="#jdk，jre与jvm" class="headerlink" title="jdk，jre与jvm"></a>jdk，jre与jvm</h3><ul><li>Java development kit                             java开发工具包 </li><li>jdkJava Runtime Environment                      java运行环境  jre</li><li>Java Virtual Machine                      java虚拟机  jvm</li></ul><h3 id="jdk1-8安装"><a href="#jdk1-8安装" class="headerlink" title="jdk1.8安装"></a>jdk1.8安装</h3><h4 id="1-jdk下载"><a href="#1-jdk下载" class="headerlink" title="1.jdk下载"></a>1.jdk下载</h4><p>​         <a href="https://www.oracle.com/java/technologies/javase-downloads.html">官网下载</a> （推荐）：程序员应该勇于自己尝试<br>​         <a href="http://pan.baidu.com/s/1dFunMsp">百度网盘下载</a><br>官网下载：找到<strong>Java SE 8</strong>区域右边的<strong>JDK Download</strong>，进入后找到<strong>Java SE Development Kit 8u281</strong>区域，选择适合自己系统的版本，这里针对windows系统，故选择<strong>Windows x64</strong></p><p>tips: 为了下面与我的一致，推荐改jdk安装路径为名为jdk8，同目录下的jre为jre8</p><h4 id="2-新建系统变量：-JAVA-HOME"><a href="#2-新建系统变量：-JAVA-HOME" class="headerlink" title="2. 新建系统变量： JAVA_HOME"></a>2. 新建系统变量： JAVA_HOME</h4><pre><code> E:\xxx\jdk8  (这里我是E盘，视自己情况而定)</code></pre><h4 id="3-在系统变量Path后追加"><a href="#3-在系统变量Path后追加" class="headerlink" title="3.在系统变量Path后追加"></a>3.在系统变量Path后追加</h4><pre><code> %JAVA_HOME%\bin</code></pre><h4 id="4-添加classpath-选"><a href="#4-添加classpath-选" class="headerlink" title="4. 添加classpath(选)"></a>4. 添加classpath(选)</h4><p>如果你不喜欢用记事本，想用集成环境，比如eclipse，IDEA或者vscode：<br>     CLASSPATH<br>    .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</p><h4 id="5-验证"><a href="#5-验证" class="headerlink" title="5.验证"></a>5.验证</h4><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows [版本 10.0.18363.592]</span><br><span class="line">(c) 2019 Microsoft Corporation。保留所有权利。</span><br><span class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\r</span>aint&gt;javac -version</span><br><span class="line">javac 1.8.0_241</span><br><span class="line"></span><br><span class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\r</span>aint&gt;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="http://raint9.tk/tags/Java/">Java</category>
      
      <category domain="http://raint9.tk/tags/Raint/">Raint</category>
      
      
      <comments>http://raint9.tk/2021/03/12/Java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MySQL语法</title>
      <link>http://raint9.tk/2021/03/11/MySQL%E8%AF%AD%E6%B3%95/</link>
      <guid>http://raint9.tk/2021/03/11/MySQL%E8%AF%AD%E6%B3%95/</guid>
      <pubDate>Thu, 11 Mar 2021 13:12:16 GMT</pubDate>
      
      <description>这是一篇关于MySQL的基础应用的笔记，感谢好友Patrick提供的帮助</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="DQL-查询"><a href="#DQL-查询" class="headerlink" title="DQL(查询)"></a>DQL(查询)</h1><h2 id="常规查询"><a href="#常规查询" class="headerlink" title="常规查询"></a>常规查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">-- 基本查询语句</span><br><span class="line">select 查询列表(*查询所有)</span><br><span class="line">from 表名</span><br><span class="line">where 判断条件</span><br><span class="line">group by 分组条件</span><br><span class="line">having 分组后筛选条件</span><br><span class="line">order by 排序条件 </span><br><span class="line">limit 【offset,】 size;</span><br><span class="line"></span><br><span class="line"># 执行顺序：</span><br><span class="line">from 子句</span><br><span class="line">where 子句</span><br><span class="line">group by 子句</span><br><span class="line">having 子句</span><br><span class="line">select 子句</span><br><span class="line">order by 子句</span><br><span class="line">limit子句</span><br><span class="line"></span><br><span class="line">-- -------------------------------------------------</span><br><span class="line"># where：</span><br><span class="line">&#x2F;*</span><br><span class="line">关系表达式筛选：&gt; &lt; &gt;&#x3D; &lt;&#x3D; &#x3D; &lt;&gt;</span><br><span class="line">补充：支持!&#x3D;，不推荐</span><br><span class="line">逻辑表达式筛选：and or not</span><br><span class="line">补充：支持&amp;&amp; || !，不推荐</span><br><span class="line">模糊查询筛选：(not) like &#x2F;(not) in &#x2F;between and &#x2F;is (not) null</span><br><span class="line">like: _ 任意单个字符，%任意多个字符</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">-- -------------------------------------------------</span><br><span class="line"># order by：</span><br><span class="line">&#x2F;*</span><br><span class="line">asc 升序默认</span><br><span class="line">desc 降序</span><br><span class="line">特点：可以使用别名、多个字段、列数等进行排序</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">-- -------------------------------------------------</span><br><span class="line"># group by&#x2F;having&#x2F;分组函数</span><br><span class="line">&#x2F;* </span><br><span class="line">特点：</span><br><span class="line">三个通常搭配使用</span><br><span class="line">查询的字段往往是分组的字段</span><br><span class="line">*&#x2F;</span><br><span class="line">-- -------------------------------------------------</span><br><span class="line"># limit</span><br><span class="line">&#x2F;*</span><br><span class="line">offset要显示条目的起始索引(起始素引从0开始)</span><br><span class="line">size要显示的条目个数</span><br><span class="line">特点：</span><br><span class="line">1.1imit语句放在查询语句的最后</span><br><span class="line">2.公式：</span><br><span class="line">如果：要显示的页数page,每页的条目数size。则</span><br><span class="line">se1ect查询列表</span><br><span class="line">from表</span><br><span class="line">limit (page-1)*size, size;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">-- 起别名</span><br><span class="line">select 字段 as &#39;别名&#39;</span><br><span class="line">select 字段 &#39;别名&#39;</span><br><span class="line">select user() as &#39;别名&#39;</span><br><span class="line">select user() &#39;别名&#39;</span><br><span class="line"></span><br><span class="line">-- 注意运算符：</span><br><span class="line">&#x2F;*</span><br><span class="line">java的加号：加法运算&#x2F;拼接</span><br><span class="line">mysql的加号：加法运算</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">含义:又称多表查询,当查询的字段来自于多个表时,就会用到连接查询</span><br><span class="line">笛卡尔乘积现象:表1有m行,表2有n行。结果 &#x3D; m*n行</span><br><span class="line"></span><br><span class="line">发生原因:没有有效的连接条件</span><br><span class="line">如何避免:添加有效的连接条件</span><br><span class="line"></span><br><span class="line">按年代分类:</span><br><span class="line">sql92标准:仅仅支持内连接</span><br><span class="line">sgl99标准【推荐】:支持内连接和外连接(左外和右外)+交叉连接</span><br><span class="line"></span><br><span class="line">按功能分类:</span><br><span class="line">内连接:</span><br><span class="line">等值连接</span><br><span class="line">非等值连接</span><br><span class="line">自连接</span><br><span class="line">外连接:</span><br><span class="line">左外连接</span><br><span class="line">右外连接</span><br><span class="line">全外连接</span><br><span class="line">交叉连接</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="92"><a href="#92" class="headerlink" title="92"></a>92</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#-----------------92----------92--------------------</span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">select 查询列表</span><br><span class="line">from 表1 别名,表2 别名</span><br><span class="line">where 表1.key&#x3D;表2.key</span><br><span class="line">【and筛选条件】</span><br><span class="line">【group by分组字段】</span><br><span class="line">【having分组后的筛选】</span><br><span class="line">【order by排序字段】;</span><br><span class="line"></span><br><span class="line">特点: where等值连接的连接条件</span><br><span class="line">1、为了解决多表中的字段名重名问题,往往为表起别名,提高语义性</span><br><span class="line">2、表的顺序无要求</span><br><span class="line">3、多表等值连接的结果为多表的交集部分</span><br><span class="line">4、n表连接,至少需要n-1个连接条件</span><br><span class="line">5、一般需要为表起别名</span><br><span class="line">可以搭配前面介绍的所有子句使用,比如排序、分组、筛选</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="99"><a href="#99" class="headerlink" title="99"></a>99</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#--------------------------99-----------------------</span><br><span class="line">&#x2F;*</span><br><span class="line">语法</span><br><span class="line">select查询列表</span><br><span class="line">from 表1 别名</span><br><span class="line">【连接类型(inner&#x2F;left&#x2F;right)】 join 表2 别名</span><br><span class="line">on连接条件</span><br><span class="line">【 where筛选条件】</span><br><span class="line">【 group by分组】</span><br><span class="line">【 having筛选条件】</span><br><span class="line">【 order by排序列表】</span><br><span class="line">【limit 索引】;</span><br><span class="line">分类:</span><br><span class="line">内连接: Inner</span><br><span class="line">外连接</span><br><span class="line">左外:1eft【outer】</span><br><span class="line">右外: right【outer】</span><br><span class="line">全外:fu11【outer】</span><br><span class="line">交叉连接: cross</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">内连接特点:</span><br><span class="line">添加排序、分组、筛选</span><br><span class="line">inner可以省路</span><br><span class="line">筛选条件放在 where后画,连接条件放在on后面,提高分高性,便于阅读</span><br><span class="line">inner join连接和sql92语法中的等值连接效果是一样的,都是查询多表交集</span><br><span class="line">外连接特点：</span><br><span class="line">应用场景:用于查询一个表中有,另一个表没有的记录</span><br><span class="line"></span><br><span class="line">1.外连接的查询结果为主表中的所有记录</span><br><span class="line">如果从表中有和它匹配的,则显示匹配的值</span><br><span class="line">如果从表中没有和它匹配的,则显示nu11</span><br><span class="line">外连接查询结果&#x3D;内连接结果+主表中有而从表没有的记录</span><br><span class="line">2.左外连接,1eft join左边的是主表</span><br><span class="line">右外连接,right join右边的是主表</span><br><span class="line">3.左外和右外交换两个表的顺序,可以实现同样的效果</span><br><span class="line">4.全外连接&#x3D;内连接的结果+表1中有但表2没有的+表2中有但表1没有的</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#子查询</span><br><span class="line">&#x2F;*</span><br><span class="line">含义</span><br><span class="line">出现在其他语句中的se1ect语句,称为子查询或内查询</span><br><span class="line">外部的查询语句,称为主查询或外查询</span><br><span class="line">分类:</span><br><span class="line">按子查询出现的位置:</span><br><span class="line">se1ect后面</span><br><span class="line">仅仅支持标量子查询</span><br><span class="line">from后面:</span><br><span class="line">支持表子查询</span><br><span class="line">where 或 having后面:</span><br><span class="line">标量子查询(单行子查询)</span><br><span class="line">列子查询(多行子查询)</span><br><span class="line">行子查询(多列多行)(使用较少)</span><br><span class="line">exists后面(相关子查询)(结果为1或者0只是判断是否存在这个值)</span><br><span class="line">表子查询</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">按结果集的行列数不同:</span><br><span class="line">标量子查询(结果集只有一行一列)</span><br><span class="line">列子查询(结果集只有一列多行)</span><br><span class="line">行子查询(结果集有一行多列)</span><br><span class="line">表子查询(结果集一般为多行多列)</span><br><span class="line"></span><br><span class="line">特点:</span><br><span class="line">1.子查询放在小括号内</span><br><span class="line">2.子查询一般放在条件的右側</span><br><span class="line">3.标量子査询,一般搭配着单行操作符使用</span><br><span class="line">  &gt; &lt; &gt;&#x3D; &lt;&#x3D; &#x3D; &lt;&gt;</span><br><span class="line">  列子查询,一般搭配着多行操作符使用</span><br><span class="line">  in、any&#x2F;some、a11</span><br><span class="line">4.子查询优先执行</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#联合查询</span><br><span class="line">&#x2F;*</span><br><span class="line">union联合合并:将多条查询语句的结果合并成一个结果</span><br><span class="line">语法</span><br><span class="line">查询语句1;</span><br><span class="line">union</span><br><span class="line">查询语句2;</span><br><span class="line">union</span><br><span class="line">应用场景:</span><br><span class="line">要查询的结果来自于多个表,且多个表没有直接的连接关系,但查询的信息一致时</span><br><span class="line"></span><br><span class="line">特点:</span><br><span class="line">1、要求多条查询语句的查询列数是一致的!</span><br><span class="line">2、要求多条查询语句的查询的每一列的类型和顺序最好一致</span><br><span class="line">3、 union关键字默认去重,如果使用 union a11可以包含重复项</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h1 id="DML-增删改"><a href="#DML-增删改" class="headerlink" title="DML(增删改)"></a>DML(增删改)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">insert</span><br><span class="line">&#x2F;*</span><br><span class="line">语法一：</span><br><span class="line">    insert into 表名(列名1,...) values</span><br><span class="line">    (值1,...),(值1,...);</span><br><span class="line">补充：</span><br><span class="line">1.省略列名则为所有列,但是插入顺序必须与原表一致</span><br><span class="line">2.插入值的类型要和类的类型一致,列数和值数必须一致</span><br><span class="line">3.如果值的约束类型可以为空则：</span><br><span class="line">1.填写null</span><br><span class="line">2.不写该列列名</span><br><span class="line">4.列的顺序可以调换</span><br><span class="line">语法二：</span><br><span class="line">    Insert into 表名</span><br><span class="line">    set 列名&#x3D;值,列名&#x3D;值</span><br><span class="line">区别：</span><br><span class="line">语法一支持多行插入,支持子查询</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">-- -------------------------------------------------</span><br><span class="line">update</span><br><span class="line">&#x2F;*</span><br><span class="line">修改单表</span><br><span class="line">语法：</span><br><span class="line">update 表名</span><br><span class="line">set 列名1&#x3D;值1,列名2&#x3D;值2,...</span><br><span class="line">where 筛选条件;</span><br><span class="line"></span><br><span class="line">修改多表：</span><br><span class="line">sql99：</span><br><span class="line">update 表1 别名</span><br><span class="line">inner&#x2F;left&#x2F;right join 表2 别名</span><br><span class="line">on 连接条件</span><br><span class="line">where 筛选条件</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">-- -------------------------------------------------</span><br><span class="line">delete</span><br><span class="line">truncate</span><br><span class="line">&#x2F;*</span><br><span class="line">单表删除：</span><br><span class="line">delete </span><br><span class="line">from 表名</span><br><span class="line">where 筛选条件;</span><br><span class="line"></span><br><span class="line">多表删除：</span><br><span class="line">sql99语法:</span><br><span class="line">de1ete 表1的别名,表2的别名</span><br><span class="line">from 表1 别名</span><br><span class="line">inner&#x2F;left&#x2F;right join 表2 别名 </span><br><span class="line">on 连接条件</span><br><span class="line">where 筛选条件</span><br><span class="line">limit ;</span><br><span class="line"></span><br><span class="line">truncate table 表名;</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h1 id="DDL-库-表"><a href="#DDL-库-表" class="headerlink" title="DDL(库/表)"></a>DDL(库/表)</h1><h2 id="库"><a href="#库" class="headerlink" title="库"></a>库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 创建: create</span><br><span class="line"># 修改: alter</span><br><span class="line"># 删除: drop</span><br><span class="line"></span><br><span class="line">-- 库的创建</span><br><span class="line">create database 库名;</span><br><span class="line">-- 库的修改：由于修改会造成数据丢失一般不使用</span><br><span class="line">alter database 库名 character set &#39;编码格式&#39;; -- 修改字符集</span><br><span class="line">-- 库的删除</span><br><span class="line">drop database 库名;</span><br></pre></td></tr></table></figure><h2 id="表的创建修改"><a href="#表的创建修改" class="headerlink" title="表的创建修改"></a>表的创建修改</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">-- 表的创建</span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">create table 表名 (</span><br><span class="line">列名 列的类型【(长度),约東】,</span><br><span class="line">...</span><br><span class="line">列名 列的类型【(长度),约束】</span><br><span class="line">);</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">-- 表的修改</span><br><span class="line">-- 1.修改列名</span><br><span class="line">alter table 表名 change column 旧列名 新列名; </span><br><span class="line"></span><br><span class="line">-- 2.修改数据类型或约束</span><br><span class="line">alter table 表名 modify column 字段名 类型 约束; </span><br><span class="line"></span><br><span class="line">-- 3.添加新列</span><br><span class="line">-- 补充alter table 表名 add column 列名 【first&#x2F;after 列名(添加到此列的后面,默认最后面)】</span><br><span class="line">alter table 表名 add column 字段名 类型 约束;</span><br><span class="line"></span><br><span class="line">-- 4.删除列</span><br><span class="line">alter table 表名 drop 列名;</span><br><span class="line"></span><br><span class="line">-- 5.修改表名</span><br><span class="line">alter table 旧表名 rename to 新表名;</span><br><span class="line"></span><br><span class="line">-- 表的删除</span><br><span class="line">drop table 表名;</span><br><span class="line"></span><br><span class="line">-- -------------------------------------------------</span><br><span class="line">#库和表的通用写法</span><br><span class="line">drop database if exists 旧库名</span><br><span class="line">create database 新库名;</span><br><span class="line">drop table if exists 旧表名</span><br><span class="line">create table 表();</span><br></pre></td></tr></table></figure><h2 id="表的复制"><a href="#表的复制" class="headerlink" title="表的复制"></a>表的复制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 1.只复制结构</span><br><span class="line">create table copy1 like 表;</span><br><span class="line"></span><br><span class="line">-- 2.复制表的结构和数据</span><br><span class="line">create table copy2</span><br><span class="line">SELECT * FROM 表;</span><br><span class="line"></span><br><span class="line">-- 3.复制表的结构和部分数据</span><br><span class="line">create table copy3</span><br><span class="line">SELECT * FROM 表</span><br><span class="line">WHERE 条件;</span><br><span class="line"></span><br><span class="line">-- 4.复制表的部分结构</span><br><span class="line">create table copy4</span><br><span class="line">SELECT 部分字段</span><br><span class="line">FROM 表</span><br><span class="line">WHERE 0;</span><br></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">#数据类型</span><br><span class="line">&#x2F;*</span><br><span class="line">数值型:</span><br><span class="line">整型</span><br><span class="line">小数</span><br><span class="line">定点数</span><br><span class="line">浮点数</span><br><span class="line">字符型</span><br><span class="line">较短的文本:char、 varchar</span><br><span class="line">较长的文本:text、b1ob(较长的二进制数据)</span><br><span class="line">日期型</span><br><span class="line">*&#x2F;</span><br><span class="line">-- -------------------------------------------------</span><br><span class="line"># 整型</span><br><span class="line">&#x2F;*</span><br><span class="line">1.如果不设置无符号运是有符号,则认是有符号,如果想设置无符号,要添加 unsigned关键字</span><br><span class="line">2.如果播入的数值超出了整型的范围,会报超出范围的异常</span><br><span class="line">3.如果不设置长度,会有默认的长度</span><br><span class="line">4.长度代表了显示的最大宽度,如果不够会用0在左边填充,但必须搭配 zerofill使用!</span><br><span class="line">使用了zerofill关键字后默认为unsigned</span><br><span class="line">*&#x2F;</span><br><span class="line">-- -------------------------------------------------</span><br><span class="line"># 小数</span><br><span class="line">&#x2F;*</span><br><span class="line">1.浮点型</span><br><span class="line">float (M, D)</span><br><span class="line">double(M, D)</span><br><span class="line">2.定点型</span><br><span class="line">dec (M, D</span><br><span class="line">decimal(M, D)</span><br><span class="line">特点:</span><br><span class="line">M:整数部位+小数部位</span><br><span class="line">D:小数部位</span><br><span class="line">如果超过范围,则插入临界值</span><br><span class="line"></span><br><span class="line">M和D都可以省路</span><br><span class="line">1.如果是 decima1,则M默认为10,p默认为0</span><br><span class="line">2.如果是float和 doub1e,则会根据插入的数值的精度来决定精度</span><br><span class="line">3.定点型的精确度较高,如果要求插入数值的精度较高如货币运算等则考虑使用</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">-- -------------------------------------------------</span><br><span class="line">#字符型</span><br><span class="line">&#x2F;*</span><br><span class="line">较短的文本:</span><br><span class="line">char</span><br><span class="line">varchar</span><br><span class="line">较长的文本:</span><br><span class="line">text</span><br><span class="line">b1ob(较大的二进制)</span><br><span class="line">其他的类型：</span><br><span class="line">binary和 varbinary用于保存较短的二进制</span><br><span class="line">enum用于保存枚举</span><br><span class="line">set用于保存集合</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">-- -------------------------------------------------</span><br><span class="line">#日期类型</span><br><span class="line">&#x2F;*</span><br><span class="line">分类</span><br><span class="line">date 只保存日期</span><br><span class="line">time 只保存时间</span><br><span class="line">year 只保存年</span><br><span class="line">datetime 保存日期+时间</span><br><span class="line">timestamp 保存日期+时间</span><br><span class="line">特点:</span><br><span class="line">字节范围时区等的影响</span><br><span class="line">datetime81000--9999不受</span><br><span class="line">timestamp41970-2038受</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h1 id="数据约束标识列"><a href="#数据约束标识列" class="headerlink" title="数据约束标识列"></a>数据约束标识列</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#约束</span><br><span class="line">&#x2F;*</span><br><span class="line">分类:六大约束</span><br><span class="line">not null:非空,用于保证该字段的值不能为空</span><br><span class="line">比如：姓名、学号等</span><br><span class="line">default:默认,用于保证该字段有默认值</span><br><span class="line">比如：性别</span><br><span class="line">primary key:主键,用于保证该字段的值具有唯一性,并且非空</span><br><span class="line">比如：身份证</span><br><span class="line">unique:唯一,用于保证该字段的值具有唯一性,可以为空</span><br><span class="line">比如：座位号</span><br><span class="line">check:检查约東【mysq1中不支持】</span><br><span class="line">比如：年龄、性别</span><br><span class="line">foreign key:外键,用于限制两个表的关系,用于保证该字段的值必须来自于主表的关联列的值</span><br><span class="line">在从表添加外键约束,用于引用主表中某列的值</span><br><span class="line">比如：学表的专业編号,员工表的部门编号,员工表的工种編号</span><br><span class="line"></span><br><span class="line">添加約束的时机(数据未添加时):</span><br><span class="line">1.创建表时</span><br><span class="line">2.修改表时</span><br><span class="line"></span><br><span class="line">约東的添加分类</span><br><span class="line">列级约束:</span><br><span class="line">六大约東语法上都支持,但外键、check约束没有效果</span><br><span class="line">表级约束:</span><br><span class="line">除了非空、默认,其他的都支持</span><br><span class="line">create table 表名(</span><br><span class="line">字段 数据类型 约束(列级约束),</span><br><span class="line">字段 数据类型 约束(列级约束),</span><br><span class="line">...</span><br><span class="line">字段 数据类型 约束(列级约束)</span><br><span class="line">约束(表级约束)</span><br><span class="line"></span><br><span class="line">外键特点：</span><br><span class="line">1、要求在从表设置外键关系</span><br><span class="line">2、从表的外键列的类型和主表的关联列的类型要求一致或兼容,名称无要求</span><br><span class="line">3、主表的关联列必须是一个key(一般是主键或唯一)</span><br><span class="line">4、插入数据时,先插入主表,再插入从表</span><br><span class="line">删除数据时,先删除从表,再删除主表</span><br><span class="line">*&#x2F;</span><br><span class="line">-- -------------------------------------------------</span><br><span class="line"># 标识列</span><br><span class="line">&#x2F;*</span><br><span class="line">特点：</span><br><span class="line">1.标识列必须要和一个列搭配</span><br><span class="line">2.一个表中至多一个标识列</span><br><span class="line">3.标识列的类型只能是数值型</span><br><span class="line">4.标识列可以通过 SET auto_increment_increment&#x3D;3;设置步长。可以通过手动插入值,设置起始值</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">-- 删除标识列和数据约束参照表删除</span><br></pre></td></tr></table></figure><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">distinct -- 去重字段</span><br><span class="line">show columns from 表名; -- 查看列</span><br><span class="line">show databases; -- 查看所有库</span><br><span class="line">show tables; -- 查看所有表</span><br><span class="line">if not exists; -- 如果不存在</span><br><span class="line">if exists; -- 如果存在</span><br><span class="line">systemctl restart mysqld; -- 重启MySQL服务(Linux)</span><br><span class="line">systemctl status mysqld; -- 查看服务重启情况(linux)</span><br><span class="line"></span><br><span class="line">show index from 表名; -- 查看表的索引情况</span><br><span class="line">CREATE 索引名 INDEX 索引别名 ON 表名(索引字段); -- 添加索引(索引名不写默认primary主键)</span><br><span class="line">DROP INDEX 索引别名 ON 表名(索引字段); -- 删除索引</span><br><span class="line"></span><br><span class="line">SELECT index_name FROM information_schema.STATISTICS WHERE table_name&#x3D;&#39;表名&#39; AND table_schema&#x3D;&#39;库名&#39;</span><br><span class="line">AND index_name &lt;&gt; &#39;PRIMARY&#39; AND seq_in_index&#x3D;1; -- 查看非主键索引</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#单组函数</span><br><span class="line">&#x2F;*</span><br><span class="line">字符函数</span><br><span class="line">concat拼接</span><br><span class="line">substr截取</span><br><span class="line">length字节长度</span><br><span class="line">char_length字符长度</span><br><span class="line">instr字符索引</span><br><span class="line">trim取出前后指定字符</span><br><span class="line">lpad&#x2F;rpad左右填充</span><br><span class="line">upper&#x2F;rower变大变小写</span><br><span class="line">strcmp比较字符大小</span><br><span class="line">left&#x2F;rigth左右截取</span><br><span class="line"></span><br><span class="line">数学函数</span><br><span class="line">abs绝对值</span><br><span class="line">ecil向上取整</span><br><span class="line">floor向下取整</span><br><span class="line">round四舍五入</span><br><span class="line">truncate截取</span><br><span class="line">mod取模</span><br><span class="line">sqrt开方</span><br><span class="line">rand随机获取一个0-1的随机小数</span><br><span class="line"></span><br><span class="line">日期函数</span><br><span class="line">now获取当前日期时间</span><br><span class="line">curdate获取当前日期</span><br><span class="line">curtime获取当前时间</span><br><span class="line">datediff比较两个时间差</span><br><span class="line">date_format将日期格式更改为指定格式</span><br><span class="line">str_to_date按指定格式将字符串解析为日期</span><br><span class="line"></span><br><span class="line">其他函数</span><br><span class="line">version当前数据库服务器的版本</span><br><span class="line">database当前打开的数据库</span><br><span class="line">user当前用户</span><br><span class="line">password(&#39;字符&#39;)   返回该字符的密码形式</span><br><span class="line">nd5(&#39;字符&#39;)   返回该字符的nd5加密形式</span><br><span class="line">*&#x2F;</span><br><span class="line">-- -------------------------------------------------</span><br><span class="line">#分组函数</span><br><span class="line">&#x2F;*</span><br><span class="line">说明:分组函数住往用于实现将一组数据进行統计计算,最终得到一个值,又称为聚合函数或统计函数</span><br><span class="line">分组函数：</span><br><span class="line">sum()：求和</span><br><span class="line">avg()：求平均数</span><br><span class="line">max()：求最大值</span><br><span class="line">min()：求最小值</span><br><span class="line">count()：计算非空字段值的个数</span><br><span class="line">补充：</span><br><span class="line">count(*)</span><br><span class="line">count(常量) 都可以查询所有行</span><br><span class="line">特点：</span><br><span class="line">都忽略null值</span><br><span class="line">都可以和distinct</span><br><span class="line">和分组函数一同查询的字段,要求是 group by后出现的字段</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><h2 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">if</span><br><span class="line">&#x2F;*</span><br><span class="line">语法：if(条件,表达式1,表达式2)</span><br><span class="line">如果条件成立输出表达式1,否则输出表达式2</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">case</span><br><span class="line">-- 用法一：</span><br><span class="line">&#x2F;*</span><br><span class="line">select * </span><br><span class="line">case 表达式</span><br><span class="line">when 值1 then 结果1</span><br><span class="line">when 值2 then 结果2</span><br><span class="line">else 结果n</span><br><span class="line">end </span><br><span class="line">from</span><br><span class="line">*&#x2F;</span><br><span class="line">-- 用法二：</span><br><span class="line">&#x2F;*</span><br><span class="line">select *</span><br><span class="line">case</span><br><span class="line">when 条件1 then 结果1</span><br><span class="line">when 条件2 then 结果2</span><br><span class="line">else 结果n</span><br><span class="line">end </span><br><span class="line">from</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">#事务</span><br><span class="line">&#x2F;*</span><br><span class="line">事务：</span><br><span class="line">一个或一组sq1语句组成一个执行单元,这个执行单元要么全部执行,要么全部不执行</span><br><span class="line"></span><br><span class="line">案例:转账</span><br><span class="line">张三丰1000</span><br><span class="line">郭襄</span><br><span class="line">1000</span><br><span class="line">update 表 set 张三丰的余额&#x3D;500 where name&#x3D;&#39;张三丰&#39;</span><br><span class="line">意外</span><br><span class="line">update 表 set 郭裹的余额&#x3D;1500 where name&#x3D;&#39;郭襄&#39;</span><br><span class="line"></span><br><span class="line">事务的特性</span><br><span class="line">ACID</span><br><span class="line">原子性:一个事务不可再分割,要么都执行要么都不执行</span><br><span class="line">一致性:一个事务执行会使数据从一个一致状态切换到另外一个一致状态</span><br><span class="line">隔离性:一个事务的执行不受其他事务的干扰</span><br><span class="line">持久性:一个事务一且提交,则会永久的改变数据库的数据</span><br><span class="line"></span><br><span class="line">事务的创建：</span><br><span class="line">隐式事务:事务没有明显的开启和结束的标记</span><br><span class="line">比如 Insert、 update、 delete语句</span><br><span class="line"></span><br><span class="line">显式事务:事务具有明显的开启和结東的标记</span><br><span class="line">前提:必须先设置自动提交功能为禁用</span><br><span class="line">set autocommit&#x3D;0</span><br><span class="line"></span><br><span class="line">步骤1:开启事务</span><br><span class="line">set autocommit&#x3D;0:</span><br><span class="line">start transaction;可选的</span><br><span class="line">步骤2:编写事务中的s1语句( select insert update de1ete)</span><br><span class="line">语句1</span><br><span class="line">语句2</span><br><span class="line">...</span><br><span class="line">步骤3:结束事务</span><br><span class="line">commit; 提交事务</span><br><span class="line">rollback; 回滚事务</span><br><span class="line">savepoint 回滚名; 设置回滚点</span><br><span class="line">rollback 回滚名; 回滚到指定位置</span><br><span class="line"></span><br><span class="line">脏读: 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</span><br><span class="line">不可重复读: 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</span><br><span class="line">幻读: 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</span><br><span class="line">不可重复度和幻读区别：</span><br><span class="line">不可重复读的重点是修改比如多次读取一条记录发现其中某些列的值被修改，幻读的重点在于新增或者删除比如多次读取一条记录发现记录增多或减少了。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql中默认第三个隔高级别 repeatable read</span><br><span class="line">orac1e中默认第二个隔高级别 read committed</span><br><span class="line">查看隔离级别</span><br><span class="line">select @@tx_isolation;</span><br><span class="line">设置隔高级别</span><br><span class="line">set session&#x2F;global transaction isolation level隔高级别;</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#变量</span><br><span class="line">&#x2F;*</span><br><span class="line">系统变量:</span><br><span class="line">全局变量</span><br><span class="line">会话变量</span><br><span class="line">自定义变量:</span><br><span class="line">用户变量</span><br><span class="line">局部变量</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#1.系统变量</span><br><span class="line">&#x2F;*</span><br><span class="line">说明:变量由系统提供的,不是用户定义,属于服务器层面</span><br><span class="line">使用的语法:</span><br><span class="line">1、查看所有的系统变量</span><br><span class="line">show global&#x2F;session variables</span><br><span class="line"></span><br><span class="line">2、查看满足条件的部分系统变量</span><br><span class="line">show g1obal&#x2F;【 session】 variables like &#39;용chax용!;</span><br><span class="line"></span><br><span class="line">3、查看指定的某个系统变量的值</span><br><span class="line">select @@g1oba1&#x2F; session】.系统变量名;</span><br><span class="line"></span><br><span class="line">4、为某个系统变量赋值</span><br><span class="line">方式一：</span><br><span class="line">set global&#x2F; session】系统变量名&#x3D;值;</span><br><span class="line">方式二:</span><br><span class="line">set</span><br><span class="line">eg1oba11&#x2F;【session】.系统变量名&#x3D;值</span><br><span class="line">注意:</span><br><span class="line">如果是全局级别,则需要加g1oba1,如果是会话级别,则需要加加 session,如果不写,则默认 session</span><br><span class="line">*&#x2F;</span><br><span class="line">-- -------------------------------------------------</span><br><span class="line">#查看全局变量</span><br><span class="line">-- 作用域:服务器每次启动将为所有的全局变量赋初始值,针对于所有的会话(连接)有效,但不能跨重启</span><br><span class="line">-- 1.查看所有变量</span><br><span class="line">SHOW GLOBAL VARIABLES;</span><br><span class="line">-- 2.查看满足条件的变量</span><br><span class="line">SHOW GLOBAL VARIABLES LIKE &#39;%char%&#39;;</span><br><span class="line">-- 3.查看某个指定的变量</span><br><span class="line">SELECT @@global.autocommit;</span><br><span class="line">-- 4.修改某个指定的变量的值</span><br><span class="line">SET @@global.autocommit &#x3D; 0;</span><br><span class="line">-- ----------------------------------------------</span><br><span class="line">#查看会话变量</span><br><span class="line">-- 作用域:仅仅对当前会话(连接)有效</span><br><span class="line"></span><br><span class="line">-- 1.查看所有变量</span><br><span class="line">SHOW SESSION VARIABLES;</span><br><span class="line">-- 2.查看满足条件的变量</span><br><span class="line">SHOW SESSION VARIABLES LIKE &#39;%char%&#39;;</span><br><span class="line">-- 3.查看某个指定的变量</span><br><span class="line">SELECT @@session.autocommit;</span><br><span class="line">-- 4.修改某个指定的变量的值</span><br><span class="line">SET @@session.autocommit &#x3D; 0;</span><br><span class="line">SET SESSION autocommit &#x3D; 1;</span><br></pre></td></tr></table></figure><h3 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># 2.自定义变量</span><br><span class="line">#用户变量</span><br><span class="line">-- 定义域：仅仅对当前会话(连接)有效</span><br><span class="line">&#x2F;*</span><br><span class="line">声明（必须给初值）:</span><br><span class="line">set @用户变量&#x3D;;或</span><br><span class="line">set @用户变量:&#x3D;;或</span><br><span class="line">select @用户变量:&#x3D;;</span><br><span class="line"></span><br><span class="line">赋值：</span><br><span class="line">方式一：</span><br><span class="line">set @用户变量&#x3D;;</span><br><span class="line">set @用户变量:&#x3D;;</span><br><span class="line">select @用户变量:&#x3D;</span><br><span class="line">方式二：</span><br><span class="line">select 字段 into @用户变量 from 表名</span><br><span class="line">使用：</span><br><span class="line">select @用户变量</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">#局部变量</span><br><span class="line">-- 定义域：仅仅在begin end中有效</span><br><span class="line">&#x2F;*</span><br><span class="line">声明：</span><br><span class="line">DECLARE 变量名 类型;</span><br><span class="line">DECLARE 变量名 类型 DEFAUL 值;</span><br><span class="line"></span><br><span class="line">赋值：</span><br><span class="line">方式一:通过set或 SELECT</span><br><span class="line">set 局部变量名&#x3D;值;或</span><br><span class="line">Set 局部变量名:&#x3D;值;或</span><br><span class="line">select 局部变量名:&#x3D;值</span><br><span class="line"></span><br><span class="line">方式二:通过 SELEC INO</span><br><span class="line">select 字段 into 局部变量名</span><br><span class="line">FROM</span><br><span class="line">表</span><br><span class="line"></span><br><span class="line">使用：</span><br><span class="line">select 局部变量名</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="存储过程与自定义函数"><a href="#存储过程与自定义函数" class="headerlink" title="存储过程与自定义函数"></a>存储过程与自定义函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">存储过程</span><br><span class="line">含义:一组预先编译好的S语句的集合,理解成批处理语句</span><br><span class="line">1、提高代码的重用性</span><br><span class="line">2、简化操作</span><br><span class="line">3、减少了编译次数并且减少了和数据库服务器的连接次数,提高了效率</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE 存储过程名(参数列表)</span><br><span class="line">BEGIN</span><br><span class="line">存储过程体(一组合法的sQ语句)</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">1、参数列表包含三部分</span><br><span class="line">参数模式 参数名 参数类型</span><br><span class="line">举例:</span><br><span class="line">IN stuname VARCHAR(20)</span><br><span class="line">参数模式</span><br><span class="line">IN：该参数可以作为输入,也就是该参数需要调用方传入值</span><br><span class="line">oUT：该参数可以作为输出,也就是该参数可以作为返回值</span><br><span class="line">INOUT：该参数既可以作为输入又可以作为输出,也就是该参数既需要传入值,又可以返回值</span><br><span class="line"></span><br><span class="line">2、如果存储过程体仅仅只有一句话, BEGIN END可以省略</span><br><span class="line">存储过程体中的每条sql语句的结尾要求必须加分号</span><br><span class="line">存储过程的结尾可以使用 DELIMITER重新设置</span><br><span class="line">语法</span><br><span class="line">DELIMITER 结東标记</span><br><span class="line">案例:</span><br><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line">调用：</span><br><span class="line">call 存储过程名(参数)</span><br><span class="line">*&#x2F;</span><br><span class="line">-- ----------------------------------------------------------</span><br><span class="line">#函数</span><br><span class="line">&#x2F;*</span><br><span class="line">含义:一组预先编译好的s语句的集合,理解成批处理语句</span><br><span class="line">1、提高代码的重用性</span><br><span class="line">2、简化操作</span><br><span class="line">3、减少了编译次数并且减少了和数据库服务器的连接次数,提高了效率</span><br><span class="line"></span><br><span class="line">区别:</span><br><span class="line">存储过程:可以有0个返回,也可以有多个返回,适合做批量插入、批量更新</span><br><span class="line">函数:有且仅有1个返回,适合做处理数据后返回一个结果</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line">CREATE FUNCTION函数名(参数列表) RETURNS返回类型</span><br><span class="line">BEGIN</span><br><span class="line">函数体</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line">1.参数列表包含两部分</span><br><span class="line">参数名 和 参数类型</span><br><span class="line">2.函数体:肯定会有 return语句,如果没有会报错</span><br><span class="line">如果 return语句没有放在函数体的最后也不报错,但不建议</span><br><span class="line"></span><br><span class="line">3.函数体中仅有一句话,则可以省略 begin end</span><br><span class="line">4.使用delimiter语句设置结東标记</span><br><span class="line"></span><br><span class="line">调用语法：select 函数名(参数列表)</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="流程控制结构"><a href="#流程控制结构" class="headerlink" title="流程控制结构"></a>流程控制结构</h2><h3 id="自上而下"><a href="#自上而下" class="headerlink" title="自上而下"></a>自上而下</h3><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1. IF(表达式1,表达式2,表达式3)</span><br><span class="line">-- 如果表达式1成立输出表达式2否则表达式3</span><br><span class="line"></span><br><span class="line">#作为单独的语句</span><br><span class="line">2.1 CASE 类似于switch</span><br><span class="line">&#x2F;*</span><br><span class="line">case 表达式&#x2F;变量&#x2F;字段</span><br><span class="line">when 要判断的值1 then 返回值1或语句1;</span><br><span class="line">when 要判断的值2 then 返回值2或语句2;</span><br><span class="line">...</span><br><span class="line">else 返回的值n或语句n;</span><br><span class="line">end case;</span><br><span class="line">*&#x2F;</span><br><span class="line">2.2 CASE 类似于多重多重if</span><br><span class="line">&#x2F;*</span><br><span class="line">case </span><br><span class="line">when 要判断的条件1 then 返回值1或语句1;</span><br><span class="line">when 要判断的条件2 then 返回值2或语句2;</span><br><span class="line">...</span><br><span class="line">else 返回的值n或语句n;</span><br><span class="line">end case;</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;*</span><br><span class="line">特点：</span><br><span class="line">作为表达式：可以嵌套在其他语句中放在任何地方begin end 中或者外面</span><br><span class="line">作为独立的语句：只能放在begin end中</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*分类</span><br><span class="line">whi1e、1oop、 repeat</span><br><span class="line">循环控制:</span><br><span class="line">iterate 类似于 continue,继续,结東本次循环,继续下一次</span><br><span class="line">1eave 类似于 break,跳出,结東当前所在的循环</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#1.while</span><br><span class="line">&#x2F;*</span><br><span class="line">语法</span><br><span class="line">【标签:】whi1e 循环条件 do</span><br><span class="line">循环体;</span><br><span class="line">end whi1e【标签】;</span><br><span class="line"></span><br><span class="line">联想:</span><br><span class="line">whi1e(循环条件)&#123;</span><br><span class="line">循环体</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line">#2.loop</span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">【标签：】loop</span><br><span class="line">循环体</span><br><span class="line">end loop【标签】</span><br><span class="line">作用：模拟简单的死循环</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">【标签：】repeat</span><br><span class="line">循环体</span><br><span class="line">unit 结束循环的条件</span><br><span class="line">end repeat 【标签】;</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><h2 id="where-having"><a href="#where-having" class="headerlink" title="where/having"></a>where/having</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*筛选的基表使用的关键词位置</span><br><span class="line">分组前筛选原始表   where   group by的前面</span><br><span class="line">分组后筛选分组后的结果集havinggroup by的后面</span><br></pre></td></tr></table></figure><h2 id="delete-truncate"><a href="#delete-truncate" class="headerlink" title="delete/truncate"></a>delete/truncate</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">1. delete可以加 where条件, truncate.不能加</span><br><span class="line">2. truncate删除,效率高一丢丢</span><br><span class="line"></span><br><span class="line">3.假如要删除的表中有自增长列：</span><br><span class="line">如果用de1ete删除后,再插入数据,自增长列的值从断点开始。而truncate除后,再插入数据,自增长列的值从1开始</span><br><span class="line"></span><br><span class="line">4. truncate除没有返回值, deletel删除有返回值(返回受影响的行数)</span><br><span class="line">5. truncate删除不能回滚, deletel删除可以回滚</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="char-varchar"><a href="#char-varchar" class="headerlink" title="char/varchar"></a>char/varchar</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*写法M的意思特点空间的耗费效率</span><br><span class="line">charchar(M)最大字符数可以省略,默认为1   固定长度的字符   比较耗费  高</span><br><span class="line">varcharvarchar(M)最大的字符数,不可以省路可变长度的字符 比较节省   低</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="主键-唯一"><a href="#主键-唯一" class="headerlink" title="主键/唯一"></a>主键/唯一</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">保证唯一性是否允许为空存在个数是否允许组合</span><br><span class="line">primary key是否1个是，不推荐</span><br><span class="line">unique是是多个是，不推荐</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="列级-表级约束"><a href="#列级-表级约束" class="headerlink" title="列级/表级约束"></a>列级/表级约束</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*位置支持的约東类型是否可以起约東名</span><br><span class="line">列级约束:列的后面语法都支持,但外键没有效果不可以</span><br><span class="line">表级约東:所有列的下面默认和非空不支持,其他支持可以</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="用户变量-局部变量"><a href="#用户变量-局部变量" class="headerlink" title="用户变量/局部变量"></a>用户变量/局部变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">作用域</span><br><span class="line">作用域定义和使用的位置语法</span><br><span class="line">用户变量当前会话会话中的任何地方必须加@符号,不用限定类型</span><br><span class="line">局部变量BEGIN END中只能在 BEGIN END中,且为第一句话一般不用@符号,需要限定类型</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">事务的隔离级别:</span><br><span class="line">能否发生问题脏读不可重复读幻读</span><br><span class="line">read uncommitted: 可以可以可以</span><br><span class="line">read committed不可以可以可以</span><br><span class="line">repeatable read: 不可以不可以可以</span><br><span class="line">serializable不可以不可以不可以</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="http://raint9.tk/tags/MySQL/">MySQL</category>
      
      <category domain="http://raint9.tk/tags/Patrick/">Patrick</category>
      
      
      <comments>http://raint9.tk/2021/03/11/MySQL%E8%AF%AD%E6%B3%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>继承</title>
      <link>http://raint9.tk/2021/03/11/%E7%BB%A7%E6%89%BF/</link>
      <guid>http://raint9.tk/2021/03/11/%E7%BB%A7%E6%89%BF/</guid>
      <pubDate>Thu, 11 Mar 2021 13:08:16 GMT</pubDate>
      
      <description>这是一篇关于Java的继承篇的笔记，感谢好友菊丸栗子提供的帮助</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 父类名称 </span>&#123;</span><br><span class="line">    <span class="comment">//……</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 子类名称 <span class="keyword">extends</span> 父类名称 </span>&#123;</span><br><span class="line">    <span class="comment">//……</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">在父子类的继承关系中，如果成员变量重名，则创建子类对象时的访问方法：</span></span><br><span class="line"><span class="comment">直通过子类对象访问成员变量：等号左边是谁就优先使用谁，没有则向上找；</span></span><br><span class="line"><span class="comment">间接通过成员方法访问成员变量：该方法属于谁，就优先使用谁，没有则向上找；</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">同名变量的访问：</span></span><br><span class="line"><span class="comment">局部变量：直接写成员变量名</span></span><br><span class="line"><span class="comment">本类的成员变量：this.成员变量名</span></span><br><span class="line"><span class="comment">父类的成员变量：super.成员变量名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在父子类中的继承关系中，创建子类对象，访问成员方法的规则：</span></span><br><span class="line"><span class="comment">创建的对象是谁，就优先用谁，如果没有则向上找。</span></span><br><span class="line"><span class="comment">注意事项：</span></span><br><span class="line"><span class="comment">无论成员方法还是成员变量，如果没有都是向上找父类，绝对不会向下找子类的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">重写(Override):方法名称一样，参数【列表一样】。覆盖、覆写</span></span><br><span class="line"><span class="comment">重载(Overlood):方法名称一样，参数【列表不一样】。</span></span><br><span class="line"><span class="comment">方法重写的特点：创建的是子类对象，则优先用子类方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法覆盖重写注意事项：</span></span><br><span class="line"><span class="comment">1.必须保证父子类之间方法的名称相同，参数相同。</span></span><br><span class="line"><span class="comment">@Override：写在前面，用来检测是不是有效的覆盖重写。不写如果要求满足也是正确的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.子类方法的返回值必须【小于等于】父类方法的返回值范围。</span></span><br><span class="line"><span class="comment">扩展提示：java.lang.Object类是所有类的公共最高父类，java.lang.String是其子类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.子类方法的权限必须【大于等于】父类方法的权限修饰符。</span></span><br><span class="line"><span class="comment">提示：public &gt; protevted &gt; (default) &gt; private</span></span><br><span class="line"><span class="comment">(default)不是关键字，而是什么都不写留空</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;    <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;  <span class="comment">// 工资</span></span><br><span class="line">    <span class="keyword">private</span> LocalDate hireDay;  <span class="comment">// 时间</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String n, <span class="keyword">double</span> s, <span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        salary = s;</span><br><span class="line">        hireDay = LocalDate.of(year, month, day);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getHireDay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hireDay;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">raiseSalary</span><span class="params">(<span class="keyword">double</span> byPercent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> raise = salary * byPercent / <span class="number">100</span>;</span><br><span class="line">        salary += raise;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> bonus;      <span class="comment">//奖金</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name, <span class="keyword">double</span> salary, <span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, salary, year, month,day);<span class="comment">//（2）</span></span><br><span class="line">        bonus = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBonus</span><span class="params">(<span class="keyword">double</span> bonus)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.bonus = bonus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getSalary() +bonus;<span class="comment">//（1）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）super.getSalary()调用超类中的getSalary函数</span></span><br><span class="line"><span class="comment">//（2）super(name, salary, year, month,day);调用超类Employee中的构造器</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意：</span></span><br><span class="line"><span class="comment">//如果子类构造器没有显示的调用超类的构造器，将自动调用超类的无参构造器。如果超类没有无参构造器并且子类的构造器有没有显示的调用超类的构造器则报错</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Manager boss = <span class="keyword">new</span> Manager(<span class="string">&quot;Carl Carcker&quot;</span>,<span class="number">80000</span>,<span class="number">1981</span>,<span class="number">12</span>,<span class="number">15</span>);</span><br><span class="line">    boss.setBonus(<span class="number">5000</span>);</span><br><span class="line">    Employee[] staff = <span class="keyword">new</span> Employee[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    staff[<span class="number">0</span>] = boss;</span><br><span class="line">    staff[<span class="number">1</span>] = <span class="keyword">new</span> Employee(<span class="string">&quot;a&quot;</span>, <span class="number">50000</span>,<span class="number">1989</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line">    staff[<span class="number">2</span>] = <span class="keyword">new</span> Employee(<span class="string">&quot;b&quot;</span>, <span class="number">40000</span>,<span class="number">1990</span>,<span class="number">3</span>,<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(Employee e : staff) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name= &quot;</span> + e.getName() + <span class="string">&quot;,salary= &quot;</span> + e.getSalary());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以将子类对象赋值给超类变量</span></span><br><span class="line"><span class="comment">//staff[0]看成是Employee对象，所以</span></span><br><span class="line"><span class="comment">//boss.setBonus(5000);//OK</span></span><br><span class="line"><span class="comment">//staff[0].setBonus(5000);//NO</span></span><br></pre></td></tr></table></figure><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">继承关系中，父类构造方法的访问特点：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.子类构造方法中有一个默认隐函的“super()”调用，所以一定是先调用父类构造，后执行的子类构造</span></span><br><span class="line"><span class="comment">2.子类构造可以通过super关键字来调用父类重载构造</span></span><br><span class="line"><span class="comment">3.super的父类构造，必须是子类构造方法的第一个语句，不能多次调用super构造</span></span><br><span class="line"><span class="comment">总结：子类必须调用父类构造方法，不写则赠送一个super，写了则用指定的super调用，super只能由一个，必须是第一个</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//super的三种用法</span></span><br><span class="line"><span class="comment">//访问父类成员，访问父类方法，访问父类构造器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Fu()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是父类的构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line">    System.out.println(num);<span class="comment">//子类num</span></span><br><span class="line">    System.out.println(<span class="keyword">super</span>.num);<span class="comment">//父类num = 10;</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.method();<span class="comment">//父类方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Zi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();<span class="comment">//父类构造</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//this三种用法</span></span><br><span class="line"><span class="comment">//访问本类成员，访问本类方法，访问本类构造器</span></span><br><span class="line"><span class="comment">//无论是super()还是this()访问构造器都必须是第一个且唯一一个；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Zi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">zi</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Zi();<span class="comment">//访问本类构造</span></span><br><span class="line">        <span class="comment">//super();//错误</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="keyword">this</span>.num);<span class="comment">//访问本类变量</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.methodA();<span class="comment">//访问本类方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="this-super图解"><a href="#this-super图解" class="headerlink" title="this/super图解"></a>this/super图解</h2><p><a href="https://www.bilibili.com/video/BV1uJ411k7wy?p=163">https://www.bilibili.com/video/BV1uJ411k7wy?p=163</a></p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>见接口笔记</p><p>用父类引用指向子类对象就是多态</p><h1 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象方法就是在返回值类型前面加上一个abstract，去掉大括号以分号结束。抽象方法所在的类必须是抽象类。</span></span><br><span class="line"><span class="comment">//抽象类：在class前加上abstract</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类的使用方法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.不能直接使用(new)一个抽象类</span></span><br><span class="line"><span class="comment">2.必须用一个子类继承父类</span></span><br><span class="line"><span class="comment">3.子类必须覆盖重写父类中的抽象方法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">去掉关键字abstract补上方法体。</span></span><br><span class="line"><span class="comment">4.创建子类对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.抽象类不能创建对象</span></span><br><span class="line"><span class="comment">2.抽象类可以有构造方法但是只能子类创建的时候初始化父类的成员</span></span><br><span class="line"><span class="comment">3.抽象类不一定有抽象方法，但是抽象方法的类一定shi抽象类</span></span><br><span class="line"><span class="comment">4.抽象类的子类必须重写父类中的抽象方法</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建一个群主类：可以显示姓名以及余额</span></span><br><span class="line"><span class="comment">创建一个群友类：可以显示姓名以及余额</span></span><br><span class="line"><span class="comment">实现：输入若干群友，平均分配红包。如果有余数则添加到最后一个红包的金额中并进行随机抽取</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用户类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> balance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> balance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名为：&quot;</span> + getName() + <span class="string">&quot;余额为：&quot;</span> + getBalance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBalance</span><span class="params">(<span class="keyword">int</span> balance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//群主类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Moderator</span> <span class="keyword">extends</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Moderator() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Moderator</span><span class="params">(String name, <span class="keyword">int</span> balance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发红包</span></span><br><span class="line">    <span class="function">ArrayList&lt;Integer&gt; <span class="title">send</span><span class="params">(<span class="keyword">int</span> totalMoney, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; Change = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (totalMoney &gt; getBalance()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;余额不足！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> Change;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(&quot;输入错误！&quot;);</span></span><br><span class="line">            <span class="keyword">return</span>  Change;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> avg = totalMoney/count; <span class="comment">//固定金额</span></span><br><span class="line">        <span class="keyword">int</span> mod = totalMoney%count;<span class="comment">// 余下的金额</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            Change.add(avg); <span class="comment">// 赋值给单个红包</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> last = avg + mod; <span class="comment">// 最后一个红包额外加上余下的金额</span></span><br><span class="line">        Change.add(last);</span><br><span class="line">        <span class="keyword">return</span> Change;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//群友类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Guest</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Guest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Guest</span><span class="params">(String name, <span class="keyword">int</span> balance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(ArrayList&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="keyword">new</span> Random().nextInt(list.size()); <span class="comment">// 随机获得其中一个红包</span></span><br><span class="line">        <span class="keyword">int</span> delta = list.remove(index); <span class="comment">// 获得一个删除一个红包</span></span><br><span class="line">        <span class="keyword">int</span> money = delta + <span class="keyword">super</span>.getBalance();</span><br><span class="line">        <span class="keyword">super</span>.setBalance(money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Moderator mod = <span class="keyword">new</span> Moderator(<span class="string">&quot;张三群主&quot;</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入群友的数量：&quot;</span>);</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> count = in.nextInt();</span><br><span class="line">        Guest[] gue = <span class="keyword">new</span> Guest[count];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gue.length; i++) &#123;</span><br><span class="line">            gue[i] = <span class="keyword">new</span> Guest();</span><br><span class="line">            System.out.print(<span class="string">&quot;第&quot;</span> + (i+<span class="number">1</span>) + <span class="string">&quot;个群友的姓名：&quot;</span>);</span><br><span class="line">            String name = in.next();</span><br><span class="line">            gue[i].setName(name);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;余额：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> money = in.nextInt();</span><br><span class="line">            gue[i].setBalance(money);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入红包的金额：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> money = in.nextInt();</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list = mod.send(money,count);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gue.length; i++) &#123;</span><br><span class="line">            gue[i].receive(list);</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span> + i+<span class="number">1</span> + <span class="string">&quot;个群友的得到的红包为：&quot;</span> + gue[i].getBalance());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><p>1.将公共操作和字段放在超类中</p><p>2.不要使用protected字段</p><p>3.使用继承来实现“is-a”关系</p><p>4.除非所有继承的方法都有意义，否则不要使用继承</p><p>5.覆盖方法时，不要改变预期的行为</p><p>6.尽量使用多态而不要使用类型信息</p><p>7.不要滥用反射</p>]]></content:encoded>
      
      
      
      <category domain="http://raint9.tk/tags/Java/">Java</category>
      
      <category domain="http://raint9.tk/tags/%E8%8F%8A%E4%B8%B8%E6%A0%97%E5%AD%90/">菊丸栗子</category>
      
      
      <comments>http://raint9.tk/2021/03/11/%E7%BB%A7%E6%89%BF/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>集合</title>
      <link>http://raint9.tk/2021/03/11/%E9%9B%86%E5%90%88/</link>
      <guid>http://raint9.tk/2021/03/11/%E9%9B%86%E5%90%88/</guid>
      <pubDate>Thu, 11 Mar 2021 13:08:16 GMT</pubDate>
      
      <description>这是一篇关于Java的集合篇的笔记，感谢好友菊丸栗子提供的帮助</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Collection-lt-E-gt-接口"><a href="#Collection-lt-E-gt-接口" class="headerlink" title="Collection&lt; E &gt;(接口)"></a>Collection&lt; E &gt;(接口)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单列集合的祖宗类</span></span><br><span class="line"><span class="keyword">import</span> java.util.*; <span class="comment">// 导包格式</span></span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>; <span class="comment">// 添加集合</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span>  <span class="comment">// 吧给定集合和原集合拼接在一起</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>; <span class="comment">// 清空集合所有元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(E e)</span></span>; <span class="comment">// 把给定元素在当前集合删除并返回被删除的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Objeck obj)</span></span>; <span class="comment">// 判断集合中是否有给定元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>; <span class="comment">// 判断当前集合是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>; <span class="comment">// 返回集合中元素的个数</span></span><br><span class="line"><span class="keyword">public</span> Object[] toArray(); <span class="comment">// 把集合的元素存储到数组中</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 无序、无重复、无索引</span></span><br><span class="line">    Collection&lt;String&gt; Sets = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    Sets.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    Sets.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    Sets.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    Sets.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">    System.out.println(Sets);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断元素是否为空</span></span><br><span class="line">    System.out.println(Sets.isEmpty()); <span class="comment">// 非空</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除元素，</span></span><br><span class="line">    <span class="comment">// 如果是List系列集合删除重复元素的时候默认删除第一个</span></span><br><span class="line">    System.out.println(Sets.remove(<span class="string">&quot;张三&quot;</span>));</span><br><span class="line">    System.out.println(Sets);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Sets.clear(); // 清空集合</span></span><br><span class="line">    <span class="comment">//System.out.println(Sets);</span></span><br><span class="line"></span><br><span class="line">    System.out.println(Sets.size()); <span class="comment">// 获取集合的大小</span></span><br><span class="line">    <span class="comment">// 判断是否有这个元素</span></span><br><span class="line">    System.out.println(Sets.contains(<span class="string">&quot;张三&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把集合转换为数组</span></span><br><span class="line">    Object[] obj = Sets.toArray();</span><br><span class="line">    <span class="comment">// 吧Object数组转换为String数组</span></span><br><span class="line">    <span class="comment">//String[] str = Sets.toArray(String[]::new); </span></span><br><span class="line">    System.out.println(Arrays.toString(obj));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 集合并集</span></span><br><span class="line">    Collection&lt;String&gt; arr1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    arr1.add(<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">    arr1.add(<span class="string">&quot;ls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Collection&lt;String&gt;arr2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    arr2.add(<span class="string">&quot;ww&quot;</span>);</span><br><span class="line">    System.out.println(arr1.addAll(arr2)); <span class="comment">// 拼接</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Collection遍历方式"><a href="#Collection遍历方式" class="headerlink" title="Collection遍历方式"></a>Collection遍历方式</h2><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator; <span class="comment">// 迭代器导包格式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator <span class="title">iterator</span><span class="params">()</span></span>; <span class="comment">// 获取迭代器</span></span><br><span class="line">E.next(); <span class="comment">// 获取下一个元素值</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>; <span class="comment">// 判断是否有下一个元素有返回true，反之。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Iterator&lt;String&gt; it = list.iterator(); <span class="comment">// 创建迭代器</span></span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()<span class="comment">/*判断是否有下一个元素*/</span>) &#123;</span><br><span class="line">        String ele = it.next(); <span class="comment">// 获取下一个的元素</span></span><br><span class="line">        System.out.println(ele);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for-eash"><a href="#for-eash" class="headerlink" title="for eash"></a>for eash</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">for (访问或遍历对象的类型 变量名 : 被遍历数组或集合) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">缺点：无法知道到底遍历到哪个元素了即没有索引。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection&lt;String&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    lists.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    lists.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    lists.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">    lists.add(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">    System.out.println(lists);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(String list : lists) &#123;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jdk8以后的新技术</span></span><br><span class="line">lists.forEach(s-&gt;&#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 优化形式</span></span><br><span class="line"><span class="comment">// lists.forEach(s-&gt;System.out.println(s)); </span></span><br><span class="line"><span class="comment">// lists.forEach(System.out::println);</span></span><br></pre></td></tr></table></figure><h2 id="List-lt-E-gt-接口"><a href="#List-lt-E-gt-接口" class="headerlink" title="List&lt; E &gt;(接口)"></a>List&lt; E &gt;(接口)</h2><p>特点：添加的元素是有序，可重复，有索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List; <span class="comment">// 导包格式</span></span><br></pre></td></tr></table></figure><h3 id="ArrayList-lt-E-gt"><a href="#ArrayList-lt-E-gt" class="headerlink" title="ArrayList&lt; E &gt;"></a>ArrayList&lt; E &gt;</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完全继承List父类接口的所有内容，对比于Collection多了各种索引方法</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList; <span class="comment">// 导包格式</span></span><br><span class="line"><span class="comment">// 特点：底层基于数组，查询快，增删慢。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法(包括Collection父类中的方法)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>; <span class="comment">// 在指定位置后添加元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>; <span class="comment">// 返回指定位置的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>; <span class="comment">// 删除指定位置的元素并返回此元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>; <span class="comment">// 修改指定位置的元素并返回旧元素</span></span><br><span class="line"><span class="function">List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span></span>; <span class="comment">// 返回一个[fromIndex,toIndex]的数组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 多态写法</span></span><br><span class="line">    List&lt;String&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    lists.add(<span class="string">&quot;Java1&quot;</span>);</span><br><span class="line">    lists.add(<span class="string">&quot;Java1&quot;</span>);</span><br><span class="line">    lists.add(<span class="string">&quot;Java2&quot;</span>);</span><br><span class="line">    lists.add(<span class="string">&quot;Java2&quot;</span>);</span><br><span class="line">    System.out.println(lists);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在某个元素前面添加元素</span></span><br><span class="line">    lists.add(<span class="number">2</span>,<span class="string">&quot;MySQL&quot;</span>);</span><br><span class="line">    System.out.println(lists);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除某个元素默认并返回这个元素</span></span><br><span class="line">    String str1 = lists.remove(<span class="number">3</span>);</span><br><span class="line">    System.out.println(str1);</span><br><span class="line">    System.out.println(lists);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改某个元素并返回旧元素(基本不用)</span></span><br><span class="line">    String str2 = lists.set(<span class="number">1</span>,<span class="string">&quot;Java2&quot;</span>);</span><br><span class="line">    System.out.println(str2);</span><br><span class="line">    System.out.println(lists);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取索引元素</span></span><br><span class="line">    System.out.println(lists.get(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LinekdList-lt-E-gt"><a href="#LinekdList-lt-E-gt" class="headerlink" title="LinekdList&lt; E &gt;"></a>LinekdList&lt; E &gt;</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList; <span class="comment">// 导包格式</span></span><br><span class="line"><span class="comment">// 特点：是以双链表的结构实现的，所以增加了首尾操作的方法。</span></span><br><span class="line"><span class="comment">// 定位和增删首尾的速度是最快的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span></span>; <span class="comment">// 将指定元素添加到此列表的开头</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addList</span><span class="params">(E e)</span></span>; <span class="comment">// 将指定元素添加到此列表的结尾</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">(E e)</span></span>; <span class="comment">// 返回此列表的第一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getList</span><span class="params">(E e)</span></span>; <span class="comment">// 返回此列表的最后一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">(E e)</span></span>; <span class="comment">// 移除返回此列表的第一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeList</span><span class="params">(E e)</span></span>; <span class="comment">// 移除返回此列表的最后一个元素</span></span><br><span class="line"><span class="comment">// 底层就是addFirst和removeList</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">push</span><span class="params">()</span></span>; <span class="comment">// 讲元素推入此列表所表示的堆栈</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span></span>; <span class="comment">// 从此列表所表示的堆栈处弹出一个元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建LinkedList</span></span><br><span class="line">    LinkedList&lt;String&gt; lists = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建队列 先进先出，后进后出</span></span><br><span class="line">    <span class="comment">// 入队</span></span><br><span class="line">    lists.addLast(<span class="string">&quot;1号&quot;</span>);</span><br><span class="line">    lists.addLast(<span class="string">&quot;2号&quot;</span>);</span><br><span class="line">    lists.addLast(<span class="string">&quot;3号&quot;</span>);</span><br><span class="line">    lists.addLast(<span class="string">&quot;4号&quot;</span>);</span><br><span class="line">    System.out.println(lists);</span><br><span class="line">    <span class="comment">// 出队</span></span><br><span class="line">    lists.removeFirst();</span><br><span class="line">    lists.removeFirst();</span><br><span class="line">    System.out.println(lists);</span><br><span class="line"></span><br><span class="line">    lists.clear(); <span class="comment">// 清空</span></span><br><span class="line">    <span class="comment">// 创建栈 先进后出，后进先出</span></span><br><span class="line">    <span class="comment">// 压栈 底层实现是addFirst</span></span><br><span class="line">    lists.push(<span class="string">&quot;第一颗子弹&quot;</span>);</span><br><span class="line">    lists.push(<span class="string">&quot;第二颗子弹&quot;</span>);</span><br><span class="line">    lists.push(<span class="string">&quot;第三颗子弹&quot;</span>);</span><br><span class="line">    lists.push(<span class="string">&quot;第四颗子弹&quot;</span>);</span><br><span class="line">    System.out.println(lists);</span><br><span class="line">    <span class="comment">// 弹栈 底层实现是removeFirst</span></span><br><span class="line">    lists.pop(); <span class="comment">// </span></span><br><span class="line">    lists.pop();</span><br><span class="line">    System.out.println(lists);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vector-lt-E-gt-被淘汰"><a href="#vector-lt-E-gt-被淘汰" class="headerlink" title="vector&lt; E &gt;(被淘汰)"></a>vector&lt; E &gt;(被淘汰)</h3><p>特点：线程安全，速度慢，工作中很少使用(被淘汰)</p><h2 id="Set-lt-E-gt-接口"><a href="#Set-lt-E-gt-接口" class="headerlink" title="Set&lt; E &gt;(接口)"></a>Set&lt; E &gt;(接口)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Set; <span class="comment">// 导包格式</span></span><br><span class="line"><span class="comment">// 特点：添加元素是无序，不重复，无索引。</span></span><br></pre></td></tr></table></figure><h3 id="HashSet-lt-E-gt"><a href="#HashSet-lt-E-gt" class="headerlink" title="HashSet&lt; E &gt;"></a>HashSet&lt; E &gt;</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet; <span class="comment">// 导包格式</span></span><br><span class="line"><span class="comment">// 特点：元素是无序，不重复，无索引。</span></span><br><span class="line"><span class="comment">// 完全继承了父类Set的，底层是无键的HashMap</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 苹果类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price; <span class="comment">// 价格</span></span><br><span class="line">    <span class="keyword">private</span> String color; <span class="comment">// 颜色</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(String name, <span class="keyword">double</span> price, String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Apple apple = (Apple) o;</span><br><span class="line">        <span class="keyword">return</span> Double.compare(apple.price, price) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                Objects.equals(name, apple.name) &amp;&amp;</span><br><span class="line">                Objects.equals(color, apple.color);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, price, color);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Apple&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&quot;, color=&#x27;&quot;</span> + color + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Set&lt;String&gt; sets = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    sets.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    sets.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    sets.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    sets.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">    sets.add(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">    System.out.println(sets); <span class="comment">// 随机无重复</span></span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如何实现无重复</span></span><br><span class="line">    Apple a1 = <span class="keyword">new</span> Apple(<span class="string">&quot;红富士&quot;</span>,<span class="number">59.99</span>,<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">    Apple a2 = <span class="keyword">new</span> Apple(<span class="string">&quot;红富士&quot;</span>,<span class="number">59.99</span>,<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">    Apple a3 = <span class="keyword">new</span> Apple(<span class="string">&quot;乔纳金&quot;</span>,<span class="number">39.99</span>,<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">    Set&lt;Apple&gt; apples = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    apples.add(a1);</span><br><span class="line">    apples.add(a2);</span><br><span class="line">    apples.add(a3);</span><br><span class="line">    System.out.println(apples);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * Set如何实现无重复？</span></span><br><span class="line"><span class="comment">      * 对于普通类型那么直接比较值就可以判断是否重复</span></span><br><span class="line"><span class="comment">      * 如果是引用类型那么就需要判断地址</span></span><br><span class="line"><span class="comment">      * 但是我们希望的是不只是地址相同如果他们的内容相同那么也应该判定为相同</span></span><br><span class="line"><span class="comment">      * 所以在创建自定义类型的集合的时候要重写自定义类型中的equals方法和hashcode方法</span></span><br><span class="line"><span class="comment">      * 如何实现无序？</span></span><br><span class="line"><span class="comment">      * 在底层实现类哈希表的算法</span></span><br><span class="line"><span class="comment">      * jdk8之前 哈希表 = 数组 + 链表 + (哈希算法)</span></span><br><span class="line"><span class="comment">      * jdk8之后 哈希表 = 数组 + 链表 + 红黑树 + (哈希算法)</span></span><br><span class="line"><span class="comment">      * 当链表的结点&gt;8的时候就转换为红黑树</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="LinkedHashSet-lt-E-gt"><a href="#LinkedHashSet-lt-E-gt" class="headerlink" title="LinkedHashSet&lt; E &gt;"></a>LinkedHashSet&lt; E &gt;</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet; <span class="comment">// 导包格式</span></span><br><span class="line"><span class="comment">// 特点：元素有序，不重复，无索引</span></span><br><span class="line"><span class="comment">// 有序的原因是由于在底层使用链表链接了存储顺序。缺点就是重新创建了链表占用内存</span></span><br><span class="line"><span class="comment">// 底层是无键的LinkedHashMap</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Set&lt;String&gt; sets = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">    sets.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    sets.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    sets.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">    sets.add(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">    System.out.println(sets);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TreeSet-lt-E-gt"><a href="#TreeSet-lt-E-gt" class="headerlink" title="TreeSet&lt; E &gt;"></a>TreeSet&lt; E &gt;</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.TreeSet; <span class="comment">// TreeSet集合导包格式</span></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator; <span class="comment">// 比较器导包格式</span></span><br><span class="line"><span class="comment">// 特点：不重复，无索引，按照大小默认升序排序！！</span></span><br><span class="line"><span class="comment">// 注意下面的比较规则</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 字符串默认比较每一个字符的ASCII码升序排列</span></span><br><span class="line">    Set&lt;String&gt; strSet = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">    strSet.add(<span class="string">&quot;dile&quot;</span>);</span><br><span class="line">    strSet.add(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">    strSet.add(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    strSet.add(<span class="string">&quot;Angel&quot;</span>);</span><br><span class="line">    strSet.add(<span class="string">&quot;李红&quot;</span>);</span><br><span class="line">    strSet.add(<span class="string">&quot;diniu&quot;</span>);</span><br><span class="line">    System.out.println(strSet);</span><br><span class="line">    System.out.println(<span class="string">&quot;------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组默认按照大小升序排列</span></span><br><span class="line">    Set&lt;Double&gt; doubleSet = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">    doubleSet.add(<span class="number">100.0</span>);</span><br><span class="line">    doubleSet.add(<span class="number">10.1</span>);</span><br><span class="line">    doubleSet.add(<span class="number">90.0</span>);</span><br><span class="line">    doubleSet.add(<span class="number">43.0</span>);</span><br><span class="line">    System.out.println(doubleSet);</span><br><span class="line">    System.out.println(<span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 如果直接将自定义类型作为TreeSet集合的元素会警告没有可比的规则并且运行会报错</span></span><br><span class="line"><span class="comment">         * 解决方案：</span></span><br><span class="line"><span class="comment">         * 1.把自定义类型继承比较器接口Compareble重写compareTo比较方法</span></span><br><span class="line"><span class="comment">         * 规则：</span></span><br><span class="line"><span class="comment">         * 如果程序员认为比较者 &gt; 被比较早则返回正数</span></span><br><span class="line"><span class="comment">         * 如果程序员认为比较者 &lt; 被比较早则返回负数数</span></span><br><span class="line"><span class="comment">         * 如果程序员认为比较者 == 被比较早则返回0</span></span><br><span class="line"><span class="comment">         * 2.可以在集合定义比较器对象Compertor重写Compare比较规则</span></span><br><span class="line"><span class="comment">         * 规则：同上</span></span><br><span class="line"><span class="comment">         * 注意：</span></span><br><span class="line"><span class="comment">         * 如果同时存在CompareTo比较方法和Compare比较规则优先使用Compar规则</span></span><br><span class="line"><span class="comment">         * (类和集合都存在比较规则，优先使用集合自带规则)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    Set&lt;Workers&gt; staffs1 = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">    staffs1.add(<span class="keyword">new</span> Workers(<span class="string">&quot;张三&quot;</span>,<span class="number">6500</span>,<span class="number">20</span>));</span><br><span class="line">    staffs1.add(<span class="keyword">new</span> Workers(<span class="string">&quot;王五&quot;</span>,<span class="number">8500</span>,<span class="number">22</span>));</span><br><span class="line">    staffs1.add(<span class="keyword">new</span> Workers(<span class="string">&quot;李四&quot;</span>,<span class="number">7500</span>,<span class="number">21</span>));</span><br><span class="line">    System.out.println(staffs1); <span class="comment">// 年龄升序</span></span><br><span class="line"></span><br><span class="line">    Set&lt;Workers&gt; staffs2 = <span class="keyword">new</span> TreeSet&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Workers&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Workers o1, Workers o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> o2.getAge() - o1.getAge(); <span class="comment">// 年龄降序</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    staffs2.add(<span class="keyword">new</span> Workers(<span class="string">&quot;波仔&quot;</span>,<span class="number">6500</span>,<span class="number">20</span>));</span><br><span class="line">    staffs2.add(<span class="keyword">new</span> Workers(<span class="string">&quot;乔治&quot;</span>,<span class="number">8500</span>,<span class="number">22</span>));</span><br><span class="line">    staffs2.add(<span class="keyword">new</span> Workers(<span class="string">&quot;波妞&quot;</span>,<span class="number">7500</span>,<span class="number">21</span>));</span><br><span class="line">    System.out.println(staffs2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Workers</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Workers</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Workers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Workers</span><span class="params">(String name, <span class="keyword">double</span> salary, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Workers&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, salary=&quot;</span> + salary +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Workers o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &gt; o.age) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt; o.age) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 优雅式代码: return this.age - o.age;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? <span class="keyword">super</span> T&gt; c, T... elements)</span></span>; <span class="comment">//给集合批量添加元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shuffie</span><span class="params">(List&lt;?&gt; list)</span></span>; <span class="comment">//打乱集合顺序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(List&lt;T&gt; list)</span></span>; <span class="comment">//将集合中的元素按照默认规则排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(List&lt;T&gt; list, Comparator&lt;? <span class="keyword">super</span> T&gt;)</span></span>; <span class="comment">// 将集合中的元素按照规则排序</span></span><br><span class="line"><span class="comment">// sort的扩展方法参照TreeSet集合的比较器规则</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection&lt;String&gt; lists1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 可以一次性赋值多次 第一个参数为添加的集合，后面为添加元素</span></span><br><span class="line">    Collections.addAll(lists1,<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">    System.out.println(lists1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 乱序,只能打乱有序的List集合</span></span><br><span class="line">    List&lt;String&gt; lists2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Collections.addAll(lists2,<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bcd&quot;</span>,<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;乱序前：&quot;</span> + lists2);</span><br><span class="line">    Collections.shuffle(lists2);</span><br><span class="line">    System.out.println(<span class="string">&quot;乱序后：&quot;</span> + lists2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对List集合进行排序默认升序</span></span><br><span class="line">    Collections.sort(lists2);</span><br><span class="line">    System.out.println(lists2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><p>如果希望元素可以重复，又有索引，查询要快使用<strong>ArrayList</strong>集合(使用最多)</p><p>如果希望元素可以重复，又有索引，增删快使用<strong>LinkedList</strong>集合(适合查询元素较多，经常需要首尾操作元素)</p><p>如果希望增删改查都很快，但是元素不重复以及无序无索引，使用<strong>HashSet</strong>集合</p><p>如果希望增删改查都很快且有序，但是元素不重复以及无索引，使用<strong>LinkedHashSet</strong>集合</p><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">可变参数格式： 数据类型...变量名称</span></span><br><span class="line"><span class="comment">注意事项：</span></span><br><span class="line"><span class="comment">一个形参列表中可变参数只能是一个！！</span></span><br><span class="line"><span class="comment">可变参数必须放在形参列表的最后面！！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    sum(); <span class="comment">// 可以传0个数据</span></span><br><span class="line">    sum(<span class="number">10</span>); <span class="comment">// 可以传两个数据</span></span><br><span class="line">    sum(<span class="number">10</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>); <span class="comment">// 可以传多个数据</span></span><br><span class="line">    sum(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>&#125;); <span class="comment">// 可以传递数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>...nums)</span> </span>&#123;</span><br><span class="line">    System.out.println(Arrays.toString(nums));</span><br><span class="line">    System.out.println(<span class="string">&quot;数组的个数为：&quot;</span> + nums.length);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常见的数据结构"><a href="#常见的数据结构" class="headerlink" title="常见的数据结构"></a>常见的数据结构</h1><p>队列(queue)</p><p>——先进先出，后进后出。</p><p>——场景：医院挂号。</p><p>栈(stack)</p><p>——后进先出，先进后出(入栈 == 压栈，出栈 == 弹栈)</p><p>——场景：弹夹上弹</p><p>数组</p><p>——数组是内存中连续存储区域并且每个小区域的大小是一样的</p><p>——特点：查找元素快，增删元素慢</p><p>链表</p><p>——不是内存中连续的存储区域，每个元素会记录下一个元素的地址</p><p>——特点：查询元素慢，增删元素快(针对首位元素极快，一般是双链表)</p><p>树</p><p>-&gt;二叉树</p><p>-&gt;查找二叉树</p><p>——缺点：容易出现瘸子的现象</p><p>-&gt;平衡二叉树</p><p>-&gt;红黑树</p><h1 id="斗地主案例"><a href="#斗地主案例" class="headerlink" title="斗地主案例"></a>斗地主案例</h1><p>需求分析：</p><p>斗地主做牌，洗牌，发牌，看牌(排序)</p><p>业务：总共有54张牌</p><p>点数：”3”,”4”,”5”,”6”,”7”,”8”,”9”,”10”,”J”,”Q”,”K”,”A”,”2”</p><p>花色：”♠”,”♥”,”♣”,”♦”</p><p>大小王：”👲”，”🃏”</p><p>点数分别要组合4中花色，大小王各一张。</p><p>斗地主：发出51张牌，剩下三张作底牌</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 牌类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Card</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String number;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Card</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Card</span><span class="params">(String number, String color, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number + color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameDome</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一副新牌</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Card&gt; ALL_CARDS = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用静态代码块优化代码</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 牌的点数</span></span><br><span class="line">        String[] numbers = &#123;<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;10&quot;</span>,<span class="string">&quot;J&quot;</span>,<span class="string">&quot;Q&quot;</span>,<span class="string">&quot;K&quot;</span>,<span class="string">&quot;A&quot;</span>,<span class="string">&quot;2&quot;</span>&#125;;</span><br><span class="line">        String[] colors = &#123;<span class="string">&quot;♠&quot;</span>,<span class="string">&quot;♥&quot;</span>,<span class="string">&quot;♣&quot;</span>,<span class="string">&quot;♦&quot;</span>&#125;; <span class="comment">// 牌的花色</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index =<span class="number">0</span>; <span class="comment">// 添加牌的索引</span></span><br><span class="line">        <span class="comment">// 将每一个数字和花色组合存进集合中</span></span><br><span class="line">        <span class="keyword">for</span> (String num : numbers) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String decor : colors) &#123;</span><br><span class="line">                Card card = <span class="keyword">new</span> Card(num,decor,index++);</span><br><span class="line">                ALL_CARDS.add(card);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后将大王和小王存入数组</span></span><br><span class="line">        Collections.addAll(ALL_CARDS,<span class="keyword">new</span> Card(<span class="string">&quot;&quot;</span>,<span class="string">&quot;🃏&quot;</span>, index++),</span><br><span class="line">                <span class="keyword">new</span> Card(<span class="string">&quot;&quot;</span>,<span class="string">&quot;👲&quot;</span>,index++));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;新牌&quot;</span> + ALL_CARDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 洗牌</span></span><br><span class="line">        Collections.shuffle(ALL_CARDS);</span><br><span class="line">        System.out.println(<span class="string">&quot;洗牌后&quot;</span> + ALL_CARDS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建三个玩家</span></span><br><span class="line">        List&lt;Card&gt; zhangsan = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Card&gt; lisi = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Card&gt; wangwu = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发牌 一张牌一个玩家</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ALL_CARDS.size() - <span class="number">3</span>; i++) &#123;</span><br><span class="line">            Card c = ALL_CARDS.get(i);</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                zhangsan.add(c);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                lisi.add(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                wangwu.add(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对牌进行排序</span></span><br><span class="line">        sortCard(zhangsan);</span><br><span class="line">        sortCard(lisi);</span><br><span class="line">        sortCard(wangwu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出手中的牌</span></span><br><span class="line">        System.out.println(<span class="string">&quot;张三的牌：&quot;</span> + zhangsan);</span><br><span class="line">        System.out.println(<span class="string">&quot;李四的牌：&quot;</span> + lisi);</span><br><span class="line">        System.out.println(<span class="string">&quot;王五的牌：&quot;</span> + wangwu);</span><br><span class="line">        <span class="comment">// 最后三张牌</span></span><br><span class="line">        List&lt;Card&gt; lastThreeCard = ALL_CARDS.subList(ALL_CARDS.size() - <span class="number">3</span>, ALL_CARDS.size());</span><br><span class="line">        System.out.println(<span class="string">&quot;底牌：&quot;</span> + lastThreeCard);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//具体实现</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortCard</span><span class="params">(List&lt;Card&gt; list)</span> </span>&#123;</span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Card&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Card o1, Card o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o2.getIndex() - o1.getIndex();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Map-lt-k-V-gt-接口"><a href="#Map-lt-k-V-gt-接口" class="headerlink" title="Map&lt; k, V &gt;(接口)"></a>Map&lt; k, V &gt;(接口)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Map; <span class="comment">// 导包格式</span></span><br><span class="line"><span class="comment">/*特点：</span></span><br><span class="line"><span class="comment">1.Map集合的特点都是由键决定的</span></span><br><span class="line"><span class="comment">2.Map集合的键是无序，不重复，无索引。</span></span><br><span class="line"><span class="comment">——Map集合后面重复的键对应的元素会覆盖前面的整个元素！！</span></span><br><span class="line"><span class="comment">3.Map集合的值无要求</span></span><br><span class="line"><span class="comment">4.Map集合的键值可以为null</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span></span>; <span class="comment">// 把指定的键与指定的值添加到Map中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">putAll</span><span class="params">(Map&lt;K,V&gt;)</span></span>; <span class="comment">// 将指定集合拼接到原集合中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span></span>; <span class="comment">// 把指定的键和元素删除并且返回此元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span></span>; <span class="comment">// 根据指定的键获取对应的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span></span>; <span class="comment">// 将Map集合所有的键存到Set集合中</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;K&gt; &lt;Map.Entry&lt;K,V&gt;&gt; entrySet(); <span class="comment">// 获取Map集合中所有的键值对对象的集合(Set集合)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containKey</span><span class="params">(Object key)</span></span>; <span class="comment">// 判断该集合是否有此键</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containValue</span><span class="params">(Object value)</span></span>; <span class="comment">//判断该集合是否有此值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>; <span class="comment">// 获取Map集合的元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>; <span class="comment">// 清空集合所有元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>; <span class="comment">// 判断集合是否为空</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Integer&gt; maps1 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    maps1.put(<span class="string">&quot;手表&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    maps1.put(<span class="string">&quot;Huawei&quot;</span>,<span class="number">100</span>);</span><br><span class="line">    maps1.put(<span class="string">&quot;娃娃&quot;</span>,<span class="number">30</span>);</span><br><span class="line">    maps1.put(<span class="string">&quot;Xiaomi&quot;</span>,<span class="number">200</span>); <span class="comment">// 后面的键值会覆盖前面的键值</span></span><br><span class="line">    System.out.println(maps1); <span class="comment">// 无序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据键删除元素</span></span><br><span class="line">    maps1.remove(<span class="string">&quot;Xiaomi&quot;</span>);</span><br><span class="line">    System.out.println(maps1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据键获取值</span></span><br><span class="line">    Integer num = maps1.get(<span class="string">&quot;Huawei&quot;</span>);</span><br><span class="line">    System.out.println(num); <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否包含某个键存在true，反之</span></span><br><span class="line">    System.out.println(maps1.containsKey(<span class="string">&quot;Huawei&quot;</span>)); <span class="comment">// ture</span></span><br><span class="line">    System.out.println(maps1.containsKey(<span class="string">&quot;Xiaomi&quot;</span>)); <span class="comment">// flase</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否包含某个值</span></span><br><span class="line">    System.out.println(maps1.containsValue(<span class="number">100</span>)); <span class="comment">// ture</span></span><br><span class="line">    System.out.println(maps1.containsValue(<span class="number">520</span>)); <span class="comment">// flase</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将集合中的键全部取出</span></span><br><span class="line">    Set&lt;String&gt; sets = maps1.keySet();</span><br><span class="line">    System.out.println(sets);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将集合中的值全部取出</span></span><br><span class="line">    Collection&lt;Integer&gt; lists = maps1.values();</span><br><span class="line">    System.out.println(lists);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将另外一个集合的元素全部导入此集合中</span></span><br><span class="line">    Map&lt;String, Integer&gt; maps2 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    maps2.put(<span class="string">&quot;Lenovo&quot;</span>,<span class="number">1000</span>);</span><br><span class="line">    maps2.put(<span class="string">&quot;手表&quot;</span>,<span class="number">1000</span>);</span><br><span class="line">    maps2.put(<span class="string">&quot;Honor&quot;</span>,<span class="number">1000</span>);</span><br><span class="line">    maps1.putAll(maps2);</span><br><span class="line">    System.out.println(maps1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取集合的大小</span></span><br><span class="line">    System.out.println(maps1.size()); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空元素</span></span><br><span class="line">    maps1.clear();</span><br><span class="line">    System.out.println(maps1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断集合是否为空</span></span><br><span class="line">    System.out.println(maps1.isEmpty()); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Map集合的遍历方式"><a href="#Map集合的遍历方式" class="headerlink" title="Map集合的遍历方式"></a>Map集合的遍历方式</h2><h3 id="键找值"><a href="#键找值" class="headerlink" title="键找值"></a>键找值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将集合中的所有键全部取出在遍历每一个键的同时通过get方法把键值全部遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Integer&gt; maps1 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    maps1.put(<span class="string">&quot;手表&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    maps1.put(<span class="string">&quot;Huawei&quot;</span>,<span class="number">100</span>);</span><br><span class="line">    maps1.put(<span class="string">&quot;娃娃&quot;</span>,<span class="number">30</span>);</span><br><span class="line">    maps1.put(<span class="string">&quot;Xiaomi&quot;</span>,<span class="number">200</span>); </span><br><span class="line">    System.out.println(maps1); </span><br><span class="line">    </span><br><span class="line">    Set&lt;String&gt; keys = maps1.keySet();</span><br><span class="line">    <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">        <span class="keyword">int</span> value = maps1.get(key);</span><br><span class="line">        System.out.println(key + <span class="string">&quot;=&quot;</span> +value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="键值对"><a href="#键值对" class="headerlink" title="键值对"></a>键值对</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.把Map集合转换成Set集合Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet();</span></span><br><span class="line"><span class="comment">2.此时键值对元素的类型就可以确定了，类型是键值对实体类型：Map.Entry&lt;K,V&gt;</span></span><br><span class="line"><span class="comment">3.可以使用foreach遍历Set集合，类型用Map.Entry&lt;K,V&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Integer&gt; maps1 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    maps1.put(<span class="string">&quot;手表&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    maps1.put(<span class="string">&quot;Huawei&quot;</span>,<span class="number">100</span>);</span><br><span class="line">    maps1.put(<span class="string">&quot;娃娃&quot;</span>,<span class="number">30</span>);</span><br><span class="line">    maps1.put(<span class="string">&quot;Xiaomi&quot;</span>,<span class="number">200</span>); </span><br><span class="line">    System.out.println(maps1); </span><br><span class="line">    </span><br><span class="line">Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entrys = maps1.entrySet();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : entrys) &#123;</span><br><span class="line">        String key = entry.getKey(); <span class="comment">// 获取键</span></span><br><span class="line">        Integer value = entry.getValue(); <span class="comment">// 获取值</span></span><br><span class="line">        System.out.println(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lambda表达式-1"><a href="#Lambda表达式-1" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Integer&gt; maps1 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    maps1.put(<span class="string">&quot;手表&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    maps1.put(<span class="string">&quot;Huawei&quot;</span>,<span class="number">100</span>);</span><br><span class="line">    maps1.put(<span class="string">&quot;娃娃&quot;</span>,<span class="number">30</span>);</span><br><span class="line">    maps1.put(<span class="string">&quot;Xiaomi&quot;</span>,<span class="number">200</span>); </span><br><span class="line">    System.out.println(maps1); </span><br><span class="line">    </span><br><span class="line">    maps1.forEach((k , v) -&gt; &#123;</span><br><span class="line">        System.out.println(k + <span class="string">&quot;=&quot;</span> + v);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HashMap-lt-K-V-gt-实现类"><a href="#HashMap-lt-K-V-gt-实现类" class="headerlink" title="HashMap&lt; K, V &gt;(实现类)"></a>HashMap&lt; K, V &gt;(实现类)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完全继承Map集合的属性，键无序，不重复，无索引，值不做要求</span></span><br><span class="line"><span class="comment">// 在使用自定义类型的时候注意重写equals和hashCode方法</span></span><br><span class="line"><span class="comment">// 否则对于引用类型他的比较往往不能达到我们想要的结果</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Map&lt;Orange,String&gt; maps = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    maps.put(<span class="keyword">new</span> Orange(<span class="string">&quot;黄色&quot;</span>,<span class="number">59.9</span>),<span class="string">&quot;江西\n&quot;</span>);</span><br><span class="line">    maps.put(<span class="keyword">new</span> Orange(<span class="string">&quot;橘黄色&quot;</span>,<span class="number">69.9</span>),<span class="string">&quot;广州\n&quot;</span>);</span><br><span class="line">    maps.put(<span class="keyword">new</span> Orange(<span class="string">&quot;黄色&quot;</span>,<span class="number">59.9</span>),<span class="string">&quot;云南\n&quot;</span>);</span><br><span class="line">    maps.put(<span class="keyword">new</span> Orange(<span class="string">&quot;青黄色&quot;</span>,<span class="number">40.9</span>),<span class="string">&quot;江西\n&quot;</span>);</span><br><span class="line">    System.out.println(maps);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Orange</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Orange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Orange</span><span class="params">(String color, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Orange&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;color=&#x27;&quot;</span> + color + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Orange orange = (Orange) o;</span><br><span class="line">        <span class="keyword">return</span> Double.compare(orange.price, price) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                Objects.equals(color, orange.color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(color, price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LinkedHashMap-lt-K-V-gt-实现类"><a href="#LinkedHashMap-lt-K-V-gt-实现类" class="headerlink" title="LinkedHashMap&lt; K,V &gt;(实现类)"></a>LinkedHashMap&lt; K,V &gt;(实现类)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 键有序，不重复，无索引，值不做要求</span></span><br><span class="line"><span class="comment">// 特点详细参考LinkedHashSet</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Integer&gt; maps1 = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    maps1.put(<span class="string">&quot;手表&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    maps1.put(<span class="string">&quot;Huawei&quot;</span>,<span class="number">100</span>);</span><br><span class="line">    maps1.put(<span class="string">&quot;娃娃&quot;</span>,<span class="number">30</span>);</span><br><span class="line">    maps1.put(<span class="string">&quot;Xiaomi&quot;</span>,<span class="number">200</span>); </span><br><span class="line">    System.out.println(maps1); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TreeMap-lt-K-V-gt-实现类"><a href="#TreeMap-lt-K-V-gt-实现类" class="headerlink" title="TreeMap&lt; K,V &gt;(实现类)"></a>TreeMap&lt; K,V &gt;(实现类)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将自定义类型作为键的时候TreeMap不知道该如何进行排序所以需要重新定义规则</span></span><br><span class="line"><span class="comment">// 具体可看treeSet</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    TreeMap&lt;String ,Integer&gt; maps1= <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">    maps1.put(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    maps1.put(<span class="string">&quot;lisi&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    maps1.put(<span class="string">&quot;wangwu&quot;</span>,<span class="number">24</span>);</span><br><span class="line">    maps1.put(<span class="string">&quot;zhaoliu&quot;</span>,<span class="number">19</span>);</span><br><span class="line">    System.out.println(maps1);</span><br><span class="line"></span><br><span class="line">    TreeMap&lt;Person,String&gt; treeMap = <span class="keyword">new</span> TreeMap&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> -Double.compare(o1.getWeight(),o2.getWeight());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    treeMap.put(<span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>,<span class="number">19</span>,<span class="number">60.5</span>),<span class="string">&quot;广西&quot;</span>);</span><br><span class="line">    treeMap.put(<span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>,<span class="number">25</span>,<span class="number">74.4</span>),<span class="string">&quot;广西&quot;</span>);</span><br><span class="line">    treeMap.put(<span class="keyword">new</span> Person(<span class="string">&quot;王五&quot;</span>,<span class="number">23</span>,<span class="number">66.6</span>),<span class="string">&quot;广西&quot;</span>);</span><br><span class="line">    treeMap.put(<span class="keyword">new</span> Person(<span class="string">&quot;赵六&quot;</span>,<span class="number">20</span>,<span class="number">70.4</span>),<span class="string">&quot;广西&quot;</span>);</span><br><span class="line">    System.out.println(treeMap);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> weight;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">double</span> weight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(<span class="keyword">double</span> weight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Double.compare(<span class="keyword">this</span>.weight , o.weight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, weight=&quot;</span> + weight +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入一串字符输出其字符出现的次数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.print(<span class="string">&quot;请输入字符：&quot;</span>);</span><br><span class="line">    String str = sc.nextLine();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// aabbccde</span></span><br><span class="line">    Map&lt;Character, Integer&gt; datas = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i ++) &#123;</span><br><span class="line">        Character ch = str.charAt(i); <span class="comment">// 取出单个字符</span></span><br><span class="line">        <span class="comment">// 如果存在这个键那么对其值+1</span></span><br><span class="line">        <span class="keyword">if</span> (datas.containsKey(ch)) &#123;</span><br><span class="line">            datas.put(ch, datas.get(ch) +<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            datas.put(ch, <span class="number">1</span>); <span class="comment">// 否则创建一个键并且值为1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;结果：&quot;</span> + datas);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Map实现斗地主案例"><a href="#Map实现斗地主案例" class="headerlink" title="Map实现斗地主案例"></a>Map实现斗地主案例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewCard</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String number;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NewCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NewCard</span><span class="params">(String number, String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number + color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameMap</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 做牌</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;NewCard, Integer&gt; ALL_CARDS_SIZE = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;NewCard&gt; ALL_CARDS = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        String[] numbers = &#123;<span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;10&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;2&quot;</span>&#125;;</span><br><span class="line">        String[] colors = &#123;<span class="string">&quot;♠&quot;</span>, <span class="string">&quot;♥&quot;</span>, <span class="string">&quot;♣&quot;</span>, <span class="string">&quot;♦&quot;</span>&#125;;</span><br><span class="line">        Integer index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String number : numbers) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String color : colors) &#123;</span><br><span class="line">                NewCard cards = <span class="keyword">new</span> NewCard(number, color);</span><br><span class="line">                ALL_CARDS_SIZE.put(cards, index++);</span><br><span class="line">                ALL_CARDS.add(cards);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 注意这里不能直接通过四个匿名对象进行大小王的赋值</span></span><br><span class="line">        <span class="comment">// 否则必须重写HashCode和equals方法</span></span><br><span class="line">        NewCard c1 = <span class="keyword">new</span> NewCard(<span class="string">&quot;&quot;</span>,<span class="string">&quot;🃏&quot;</span>);</span><br><span class="line">        NewCard c2 = <span class="keyword">new</span> NewCard(<span class="string">&quot;&quot;</span>,<span class="string">&quot;👲&quot;</span>);</span><br><span class="line">        ALL_CARDS.add(c1);</span><br><span class="line">        ALL_CARDS.add(c2);</span><br><span class="line">        ALL_CARDS_SIZE.put(c1, index++);</span><br><span class="line">        ALL_CARDS_SIZE.put(c2, index++);</span><br><span class="line">        System.out.println(<span class="string">&quot;新牌：&quot;</span> + ALL_CARDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 洗牌</span></span><br><span class="line">        Collections.shuffle(ALL_CARDS);</span><br><span class="line">        System.out.println(<span class="string">&quot;洗牌：&quot;</span> + ALL_CARDS);</span><br><span class="line"></span><br><span class="line">        List&lt;NewCard&gt; lina = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;NewCard&gt; huasheng = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;NewCard&gt; quandan = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发牌</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ALL_CARDS.size()-<span class="number">3</span>; i++) &#123;</span><br><span class="line">            NewCard cards = ALL_CARDS.get(i);</span><br><span class="line">            <span class="keyword">int</span> num = i%<span class="number">3</span>;</span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">                lina.add(cards);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">1</span>)&#123;</span><br><span class="line">                huasheng.add(cards);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                quandan.add(cards);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        sortCard(lina);</span><br><span class="line">        sortCard(huasheng);</span><br><span class="line">        sortCard(quandan);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后三张牌</span></span><br><span class="line">        List&lt;NewCard&gt; lastThreeCard = ALL_CARDS.subList(ALL_CARDS.size()-<span class="number">3</span>,ALL_CARDS.size());</span><br><span class="line">        System.out.println(<span class="string">&quot;李娜：&quot;</span> + lina);</span><br><span class="line">        System.out.println(<span class="string">&quot;华生：&quot;</span> + huasheng);</span><br><span class="line">        System.out.println(<span class="string">&quot;全蛋：&quot;</span> + quandan);</span><br><span class="line">        System.out.println(<span class="string">&quot;底牌：&quot;</span> + lastThreeCard);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortCard</span><span class="params">(List&lt;NewCard&gt; lists)</span> </span>&#123;</span><br><span class="line">        Collections.sort(lists, <span class="keyword">new</span> Comparator&lt;NewCard&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(NewCard o1, NewCard o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> ALL_CARDS_SIZE.get(o2) - ALL_CARDS_SIZE.get(o1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Map和Collection"><a href="#Map和Collection" class="headerlink" title="Map和Collection"></a>Map和Collection</h1><p>Map集合是一个集合体系为双列集合(键值对集合)</p><p>Collection集合是一个单值集合体系</p><p>Map集合每个元素包含两个值。</p><p>格式：key = value(键值对元素)</p><p>完整格式：{key1=value1,  key2=value2, key3=value3,……}</p><h1 id="图书管理系统"><a href="#图书管理系统" class="headerlink" title="图书管理系统"></a>图书管理系统</h1><p>​    类型            书名            价格            作者<br>武侠小说<br>​                    天龙八部        89.5            金庸<br>言情小说<br>​                    红楼梦            98.9            曹雪芹<br>​                    金瓶梅            99.9            兰陵笑笑生</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一.创建一个书类(书名、价格、作者)</span></span><br><span class="line"><span class="comment">二.图书管理系统</span></span><br><span class="line"><span class="comment">1.创建一个HashMap集合来储存栏目(类型)以及书的信息Map&lt;String,List&lt;Book&gt;&gt;</span></span><br><span class="line"><span class="comment">2.创建界面</span></span><br><span class="line"><span class="comment">1.添加业务</span></span><br><span class="line"><span class="comment">先让用户输入栏目名称,如果这个栏目存在则直接去原栏目的后面添加书籍</span></span><br><span class="line"><span class="comment">如果,这个栏目不存在这创建新的栏目再让用户输入书籍</span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">用字符串来接收价格在转换成浮点型,这样可以保证精度</span></span><br><span class="line"><span class="comment">用正则表达式限制用户的输入格式</span></span><br><span class="line"><span class="comment">2.查询业务</span></span><br><span class="line"><span class="comment">1.先进行判断,如果栏目为空则查无此书</span></span><br><span class="line"><span class="comment">2.按格式输出书籍</span></span><br><span class="line"><span class="comment">3.修改业务</span></span><br><span class="line"><span class="comment">1.先调用查询业务让用户知道有那些书,无书则提示用户先添加书籍</span></span><br><span class="line"><span class="comment">2.输入栏目名称(进行循环验证是否正确)</span></span><br><span class="line"><span class="comment">3.输入书名(进行循环验证是否正确)</span></span><br><span class="line"><span class="comment">4.修改信息并调用查询业务提示用户修改成功</span></span><br><span class="line"><span class="comment">4.删除业务</span></span><br><span class="line"><span class="comment">1.同修改业务</span></span><br><span class="line"><span class="comment">5.退出系统业务</span></span><br><span class="line"><span class="comment">System.exit(0);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个书类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String name, <span class="keyword">double</span> price, String author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图书管理系统</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookSystem</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, List&lt;Book&gt;&gt; BOOK_STORE = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Scanner SYS_SCANER = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        showCommand();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===========欢迎使用图书管理系统============&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;(1)查看全部书籍 query&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;(2)添加书籍信息 add&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;(3)删除书籍信息 delete&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;(4)修改书籍信息 update&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;(5)退出管理系统 exit&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入您要使用的功能：&quot;</span>);</span><br><span class="line">        String command = SYS_SCANER.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (command) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;query&quot;</span>:</span><br><span class="line">                <span class="comment">// 查看书籍</span></span><br><span class="line">                queryBook();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;add&quot;</span>:</span><br><span class="line">                <span class="comment">// 添加书籍</span></span><br><span class="line">                addBook();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;delete&quot;</span>:</span><br><span class="line">                <span class="comment">// 删除书籍</span></span><br><span class="line">                deleteBook();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;update&quot;</span>:</span><br><span class="line">                <span class="comment">// 修改书籍</span></span><br><span class="line">                updateBook();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">                <span class="comment">// 退出系统</span></span><br><span class="line">                System.out.println(<span class="string">&quot;退出成功,期待您下次使用!&quot;</span>);</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;输入命令错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        showCommand();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queryBook();</span><br><span class="line">        System.out.println(<span class="string">&quot;===========欢迎使用删除书籍业务============&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (BOOK_STORE.size() == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;请输入要删除书籍所在栏目：&quot;</span>);</span><br><span class="line">                String type = SYS_SCANER.nextLine();</span><br><span class="line">                <span class="keyword">if</span> (BOOK_STORE.containsKey(type)) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        System.out.print(<span class="string">&quot;请输入要删除书籍的名称&quot;</span>);</span><br><span class="line">                        String name = SYS_SCANER.nextLine();</span><br><span class="line">                        Book book = getBookByTypeAndName(type, name);</span><br><span class="line">                        <span class="keyword">if</span> (book == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;输入的书名不存在在,请重新确认！&quot;</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            List&lt;Book&gt; books = BOOK_STORE.get(type);</span><br><span class="line">                            books.remove(book);</span><br><span class="line">                            System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">                            queryBook();</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入栏目不存在,请重新确认！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改书籍</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queryBook();</span><br><span class="line">        System.out.println(<span class="string">&quot;===========欢迎使用修改书籍业务============&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (BOOK_STORE.size() == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;请输入要修改书籍的栏目：&quot;</span>);</span><br><span class="line">                String type = SYS_SCANER.nextLine();</span><br><span class="line">                <span class="keyword">if</span> (BOOK_STORE.containsKey(type)) &#123;</span><br><span class="line">                    <span class="comment">// 存在栏目</span></span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;请输入要修改书籍的名称：&quot;</span>);</span><br><span class="line">                        String name = SYS_SCANER.nextLine();</span><br><span class="line">                        <span class="comment">// 判断这个姓名是否存在</span></span><br><span class="line">                        Book book = getBookByTypeAndName(type, name);</span><br><span class="line">                        <span class="keyword">if</span> (book == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;没有此书籍，请重新确认&quot;</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// 输入正确,进行修改</span></span><br><span class="line">                            System.out.print(<span class="string">&quot;请输入修改书籍的新名称：&quot;</span>);</span><br><span class="line">                            String newName = SYS_SCANER.nextLine();</span><br><span class="line">                            System.out.print(<span class="string">&quot;请输入修改书籍的新价格：&quot;</span>);</span><br><span class="line">                            String newPrice = SYS_SCANER.nextLine();</span><br><span class="line">                            System.out.print(<span class="string">&quot;请输入修改书籍的新作者：&quot;</span>);</span><br><span class="line">                            String newAuthor = SYS_SCANER.nextLine();</span><br><span class="line">                            <span class="comment">// 将原数据修改</span></span><br><span class="line">                            book.setName(newName);</span><br><span class="line">                            book.setPrice(Double.valueOf(newPrice));</span><br><span class="line">                            book.setAuthor(newAuthor);</span><br><span class="line">                            queryBook();</span><br><span class="line">                            System.out.println(<span class="string">&quot;修改成功,请看如上！！&quot;</span>);</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据栏目和书的名称判断是否存在此书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 栏目</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 书籍名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Book</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Book <span class="title">getBookByTypeAndName</span><span class="params">(String type, String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 取出所有的书</span></span><br><span class="line">        List&lt;Book&gt; books = BOOK_STORE.get(type);</span><br><span class="line">        <span class="keyword">for</span> (Book book : books) &#123;</span><br><span class="line">            <span class="comment">// 存在这个书籍名称</span></span><br><span class="line">            <span class="keyword">if</span> (book.getName().equals(name)) &#123;</span><br><span class="line">                <span class="keyword">return</span> book;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// 没有这本书</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询书籍</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===========欢迎使用查询书籍业务============&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (BOOK_STORE.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;此系统没有书籍&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\t类型&quot;</span> + <span class="string">&quot;\t\t\t书名&quot;</span> + <span class="string">&quot;\t\t\t作者&quot;</span> + <span class="string">&quot;\t\t\t价格&quot;</span>);</span><br><span class="line">            BOOK_STORE.forEach((type, list) -&gt; &#123;</span><br><span class="line">                System.out.println(type);</span><br><span class="line">                <span class="keyword">for</span> (Book book : list) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;\t\t\t\t&quot;</span> + book.getName() +</span><br><span class="line">                            <span class="string">&quot;\t\t&quot;</span> + book.getPrice() + <span class="string">&quot;\t\t&quot;</span> + book.getAuthor());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加书籍</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===========欢迎使用添加书籍业务============&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入要添加的栏目：&quot;</span>);</span><br><span class="line">        String type = SYS_SCANER.nextLine();</span><br><span class="line"></span><br><span class="line">        List&lt;Book&gt; books = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 对栏目进行判断如果存在此栏目则直接添加，否则创建栏目</span></span><br><span class="line">        <span class="keyword">if</span> (BOOK_STORE.containsKey(type)) &#123;</span><br><span class="line">            <span class="comment">// 存在此栏目</span></span><br><span class="line">            books = BOOK_STORE.get(type);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 不存在</span></span><br><span class="line">            books = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            BOOK_STORE.put(type, books);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入添加书籍的名称：&quot;</span>);</span><br><span class="line">        String name = SYS_SCANER.nextLine();</span><br><span class="line">       <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">           System.out.print(<span class="string">&quot;请输入添加书籍的价格：&quot;</span>);</span><br><span class="line">           String price = SYS_SCANER.nextLine();</span><br><span class="line">           <span class="keyword">if</span> (price.matches(<span class="string">&quot;[0-9]&#123;1,&#125;.[0-9]&#123;1,&#125;&quot;</span>)) &#123;</span><br><span class="line">               System.out.print(<span class="string">&quot;请输入添加书籍的作者：&quot;</span>);</span><br><span class="line">               String author = SYS_SCANER.nextLine();</span><br><span class="line">               Book book = <span class="keyword">new</span> Book(name, Double.valueOf(price), author);</span><br><span class="line">               books.add(book);</span><br><span class="line">               BOOK_STORE.put(type, books);</span><br><span class="line">               System.out.println(<span class="string">&quot;您添加的&quot;</span> + type + <span class="string">&quot;栏目下的&quot;</span> + book.getName() + <span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;输入的价格有误,请重新确认&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="冒泡、选择排序"><a href="#冒泡、选择排序" class="headerlink" title="冒泡、选择排序"></a>冒泡、选择排序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">冒泡排序：</span></span><br><span class="line"><span class="comment">排序的轮数：数组长度-1次(最后一个不需要在比较了)</span></span><br><span class="line"><span class="comment">每一轮的次数:两两比较，起始位置为0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">55</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">77</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">// i = 0j = 0,1,2</span></span><br><span class="line">        <span class="comment">// i = 1j = 0,1</span></span><br><span class="line">        <span class="comment">// i = 2j = 0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">选择排序：</span></span><br><span class="line"><span class="comment">排序的轮数：数组长度-1(最后一个不需要在比较了)</span></span><br><span class="line"><span class="comment">比较次数：第一个和后面的依次比较，起始位置为i+1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">55</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">77</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// i = 0j = 1,2,3</span></span><br><span class="line">        <span class="comment">// i = 1j = 2,3</span></span><br><span class="line">        <span class="comment">// i = 2j = 3</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[i]) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">数组必须是排好序了之后才能使用：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">10</span>, <span class="number">23</span>, <span class="number">27</span>, <span class="number">45</span>, <span class="number">66</span>, <span class="number">87</span>, <span class="number">99</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> index = binarySearch(arr,<span class="number">100</span>);</span><br><span class="line">    System.out.println(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> end = arr.length - <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 开始位置的索引只能小于等于结束位置的索引</span></span><br><span class="line">    <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">        <span class="comment">// 取出中间位置</span></span><br><span class="line">        <span class="keyword">int</span> middleIndex = (start + end) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">如果中间索引的对应值大于要查找的数</span></span><br><span class="line"><span class="comment">        将结束位置的索引换成当前索引</span></span><br><span class="line"><span class="comment">        如果中间索引的对应值小于要查找的数</span></span><br><span class="line"><span class="comment">        将开始位置的索引换成当前索引</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (arr[middleIndex] &gt; number) &#123;</span><br><span class="line">            end = middleIndex - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[middleIndex] &lt; number) &#123;</span><br><span class="line">            start = middleIndex + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> middleIndex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="http://raint9.tk/tags/Java/">Java</category>
      
      <category domain="http://raint9.tk/tags/%E8%8F%8A%E4%B8%B8%E6%A0%97%E5%AD%90/">菊丸栗子</category>
      
      
      <comments>http://raint9.tk/2021/03/11/%E9%9B%86%E5%90%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>泛型</title>
      <link>http://raint9.tk/2021/03/11/%E6%B3%9B%E5%9E%8B/</link>
      <guid>http://raint9.tk/2021/03/11/%E6%B3%9B%E5%9E%8B/</guid>
      <pubDate>Thu, 11 Mar 2021 13:08:16 GMT</pubDate>
      
      <description>这是一篇关于Java的f泛型的笔记，感谢好友菊丸栗子提供的帮助</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">好处：泛型可以在编译阶段约束只能操作某种数据类型</span></span><br><span class="line"><span class="comment">注意：泛型和集合都只能支持引用数据类型，不支持基本数据类型</span></span><br><span class="line"><span class="comment">泛型变量里面建议使用“E,T,K,V”</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">自定义泛型类：</span></span><br><span class="line"><span class="comment">修饰符 class 类名&lt;泛型变量&gt; &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">自定义泛型方法格式：</span></span><br><span class="line"><span class="comment">修饰符 &lt;泛型变量&gt; 返回值类型 方法名称(参数列表) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">自定义泛型接口</span></span><br><span class="line"><span class="comment">修饰符 interface 类名&lt;泛型变量&gt; &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">通配符：?</span></span><br><span class="line"><span class="comment">?可以在使用的时候代表一切数据类型型(E,T,K,V表示创建泛型的时候表示一切数据类型)</span></span><br><span class="line"><span class="comment">通配符的上下限：</span></span><br><span class="line"><span class="comment">? extends 父类 那么?必须是父类或其子类。(泛型的上限)</span></span><br><span class="line"><span class="comment">? super 子类 那么?必须是子类或其父类。(泛型的下限，不常见)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="http://raint9.tk/tags/Java/">Java</category>
      
      <category domain="http://raint9.tk/tags/%E8%8F%8A%E4%B8%B8%E6%A0%97%E5%AD%90/">菊丸栗子</category>
      
      
      <comments>http://raint9.tk/2021/03/11/%E6%B3%9B%E5%9E%8B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>多线程</title>
      <link>http://raint9.tk/2021/03/11/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <guid>http://raint9.tk/2021/03/11/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <pubDate>Thu, 11 Mar 2021 13:08:16 GMT</pubDate>
      
      <description>这是一篇关于Java多线程的笔记，感谢好友菊丸栗子提供的帮助</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p>程序是静止的，运行中的程序就是进程。</p><p>进程的三个特性：</p><p>1.动态性：进程是运行中的程序，要动态的占用内存，CPU和网络等资源</p><p>2.独立性：进程与进程之间是相互独立的，彼此有自己的独立内存区域。</p><p>3.并发性：假如CPU是单核，同一个时刻其实内存中有一个进程在被执行。CPU会分时轮询切换依次为每个进程服务，因为切换的速度非常块，给我们的感觉这些进程在同时执行，这就是并发。</p><p>并行：同一时刻同时有多个在执行</p><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>线程属于进程，一个进程可以包含多个线程，这就是多线程。</p><p>线程创建开销相对于进程来说比较小</p><p>线程也支持并发性</p><p>作用：</p><p>可以提高程序的效率，线程也支持并发性，可以有更多机会得到CPU</p><p>多线程可以解决很多业务模型。</p><p>大型高并发技术的核心技术。</p><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="创建方法一"><a href="#创建方法一" class="headerlink" title="创建方法一"></a>创建方法一</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">a.通过继承Thread类的方式</span></span><br><span class="line"><span class="comment">1.定义一个线程类继承Thread</span></span><br><span class="line"><span class="comment">2.重写run()方法</span></span><br><span class="line"><span class="comment">3.创建一个新的线程对象</span></span><br><span class="line"><span class="comment">4.调用线程对象的start()方法启动线程</span></span><br><span class="line"><span class="comment">继承Thread类的优缺点：</span></span><br><span class="line"><span class="comment">优点：编码简单</span></span><br><span class="line"><span class="comment">缺点：线程类已经继承了Thread类无法继承其他类了，功能不能通过继承拓展(单继承的缺点)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// main方法为主线程</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Thread th = <span class="keyword">new</span> MyThred(); <span class="comment">// 3.创建新线程</span></span><br><span class="line">    th.start(); <span class="comment">// 4调用start方法启动线程</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程执行了&quot;</span> + i + <span class="string">&quot;次&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThred</span> <span class="keyword">extends</span> <span class="title">Thread</span>/*1.继承<span class="title">Thread</span>*/</span>&#123;</span><br><span class="line">    <span class="comment">// 2.重写run方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;<span class="number">100</span> ;i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程执行了&quot;</span> + i + <span class="string">&quot;次&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1.线程的启动必须调用start()方法，否则当成普通类处理</p><p>​    ——如果线程直接调用run()方法，相当于变成了普通类的执行，此时讲只有主线程在执行他们</p><p>​    ——start()方法底层其实是给CPU注册当线程，并且触发run()方法执行</p><p>2.建议线程先创建子线程，主线程的任务放在之后，否则主线程永远是先执行完！</p><h2 id="Thread类的API"><a href="#Thread类的API" class="headerlink" title="Thread类的API"></a>Thread类的API</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造器</span></span><br><span class="line">Thread();</span><br><span class="line">Thread(String name); <span class="comment">// 可以直接给线程提供名字</span></span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>; <span class="comment">// 给当前线程取名字</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getName</span><span class="params">()</span></span>; <span class="comment">// 获取当前线程的名字</span></span><br><span class="line"><span class="comment">// ——线程存在默认名称，子线程的默认名称是：Thread-索引</span></span><br><span class="line"><span class="comment">// ——主线程的默认名称就是：main</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Thread <span class="title">currentThread</span><span class="params">()</span></span>; <span class="comment">// 获取当前线程对象，这个代码在哪个线程中，就得到哪个线程对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Thread t1 = <span class="keyword">new</span> MyThred(); <span class="comment">// 线程1</span></span><br><span class="line">    t1.setName(<span class="string">&quot;1号线程&quot;</span>); <span class="comment">// 修改名称</span></span><br><span class="line">    t1.start();</span><br><span class="line"></span><br><span class="line">    Thread t2 = <span class="keyword">new</span> MyThred(); <span class="comment">// 线程2</span></span><br><span class="line">    t2.setName(<span class="string">&quot;2号线程&quot;</span>); <span class="comment">// 修改名称</span></span><br><span class="line">    t2.start();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    Thread t3 = <span class="keyword">new</span> MyThred(<span class="string">&quot;3号线程&quot;</span>);</span><br><span class="line">    t3.start();</span><br><span class="line">    </span><br><span class="line">    Thread m = Thread.currentThread();</span><br><span class="line">    m.setName(<span class="string">&quot;最强线程执行&quot;</span>); <span class="comment">// 修改主方法名称</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        System.out.println(m.getName() + i + <span class="string">&quot;次&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    Thread.currentThread().setName(&quot;最强线程执行&quot;);</span></span><br><span class="line"><span class="comment">//    for (int i = 0; i &lt; 10; i++) &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(Thread.currentThread().getName() + i + &quot;次&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThred</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">// 调用父类的有参构造器直接创建名称</span></span><br><span class="line">    MyThred(String name) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;<span class="number">10</span> ;i++) &#123;</span><br><span class="line">            <span class="comment">// 如果创建多个子线程的时候无法区分到底是哪个线程在执行</span></span><br><span class="line">            <span class="comment">// 所以通过currentThread()方法来获取当前的线程名字在输出</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + i + <span class="string">&quot;次&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> time)</span></span>; <span class="comment">// 让当前线程休眠多少毫秒</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>); <span class="comment">// 休眠1秒</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建方式二"><a href="#创建方式二" class="headerlink" title="创建方式二"></a>创建方式二</h2><h3 id="常规写法"><a href="#常规写法" class="headerlink" title="常规写法"></a>常规写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Thread的构造器</span></span><br><span class="line">Thread(Runnable target); <span class="comment">// 将Runnable类包装成Thread</span></span><br><span class="line">Thread(Runnable target, String name); <span class="comment">//将Runnable类包装成Thread类并取名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">实现Runnable接口的方式:</span></span><br><span class="line"><span class="comment">1.创建一个线程任务类实现Runnable接口(继承Runnable)</span></span><br><span class="line"><span class="comment">2.重写run方法</span></span><br><span class="line"><span class="comment">3.创建一个线程任务对象</span></span><br><span class="line"><span class="comment">4.把线程任务对象包装成线程对象</span></span><br><span class="line"><span class="comment">5.调用线程对象的start()方法启动线程。</span></span><br><span class="line"><span class="comment">优点：</span></span><br><span class="line"><span class="comment">1.线程任务类只是实现类Runnable接口，可以继承其他类，而且可以继续实现其他接口(避免了单继承的局限性)</span></span><br><span class="line"><span class="comment">2.同一个线程任务对象可以被包装成多个线程对象</span></span><br><span class="line"><span class="comment">3.适合多个多线程去共享同一个资源</span></span><br><span class="line"><span class="comment">4.实现解耦操作，线程任务代码可以被多个线程共享，线程任务代码和线程独立</span></span><br><span class="line"><span class="comment">5.线程池可以放入实现Runnable或Callable线程任务对象</span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">Thread类本身也是实现了Runnable接口的。</span></span><br><span class="line"><span class="comment">无法得到线程的结果,run方法void返回类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 3.创建线程任务类对象</span></span><br><span class="line">    Runnable target = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">    <span class="comment">// 4.包装成线程对象</span></span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(target,<span class="string">&quot;1号线程&quot;</span>); <span class="comment">// 有参构造器</span></span><br><span class="line">    t1.start(); <span class="comment">// start启动线程</span></span><br><span class="line"></span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(target);</span><br><span class="line">    t2.start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;--&gt;&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span>/*继承1.<span class="title">Runnable</span>*/</span>&#123;</span><br><span class="line"><span class="comment">// 2.重写run方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;--&gt;&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简略写法"><a href="#简略写法" class="headerlink" title="简略写法"></a>简略写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建线程任务匿名内部类对象</span></span><br><span class="line">    Runnable target = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;--&gt;&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 包装成线程对象</span></span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(target,<span class="string">&quot;1号线程&quot;</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    <span class="comment">// 创建匿名类匿名对象创建线程</span></span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;--&gt;&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="string">&quot;2号线程&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;--&gt;&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建方法三"><a href="#创建方法三" class="headerlink" title="创建方法三"></a>创建方法三</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable; <span class="comment">// 导包格式</span></span><br><span class="line"><span class="comment">// 优点包括了Runnable的全部优点并且可以返回值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 3.创建Callable线程任务对象</span></span><br><span class="line">    Callable&lt;String&gt; call = <span class="keyword">new</span> MyCallable();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        4.将Callable线程任务对象转换为未来线程任务类对象</span></span><br><span class="line"><span class="comment">        public FutureTask(Callable&lt;V&gt; callable); // 未来任务对象</span></span><br><span class="line"><span class="comment">        未来任务对象是什么？有什么用？</span></span><br><span class="line"><span class="comment">            未来任务对象就是一个Runnable对象:这样做就可以被包装成线程对象</span></span><br><span class="line"><span class="comment">            未来任务对象可以在线程执行完毕后得到线程执行的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FutureTask&lt;String&gt; task = <span class="keyword">new</span> FutureTask&lt;&gt;(call);</span><br><span class="line">    <span class="comment">// 5.把未来线程对象包装成线程对象</span></span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(task,<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">    t1.start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;==&gt;&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(task.get());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意Callable是泛型接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt;/*1.继承<span class="title">Callable</span>*/ </span>&#123;</span><br><span class="line"><span class="comment">// 2.重写call方法注意返回值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            sum +=i;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;==&gt;&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread().getName() + <span class="string">&quot;的返回值为：&quot;</span> + sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h1><p>注意：多个线程同时操作同一个共享资源的时候可能会出现线程安全问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多个线程同时操作同一个共享资源的时候可能会出现线程安全问题。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Account acc = <span class="keyword">new</span> Account(<span class="string">&quot;ICBC-110&quot;</span>,<span class="number">100000</span>);</span><br><span class="line"></span><br><span class="line">    Thread xiaoMing = <span class="keyword">new</span> DrawThread(acc,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">    xiaoMing.start();</span><br><span class="line"></span><br><span class="line">    Thread xiaoHong = <span class="keyword">new</span> DrawThread(acc,<span class="string">&quot;小红&quot;</span>);</span><br><span class="line">    xiaoHong.start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 模拟小明小红同时取钱的线程不安全问题</span></span><br><span class="line"><span class="comment">// 账户类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cardId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> money;</span><br><span class="line"><span class="comment">// 取钱方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawMoney</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 是谁来取钱</span></span><br><span class="line">        String name = Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果余额足够进行取钱</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.money &gt;= money) &#123;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;来取钱,余额充足吐出&quot;</span> + money);</span><br><span class="line">            <span class="keyword">this</span>.money -= money;</span><br><span class="line">            <span class="comment">// 输出余额</span></span><br><span class="line">            System.out.println(name + <span class="string">&quot;来取钱,余额剩余：&quot;</span> + <span class="keyword">this</span>.money);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;余额不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(String cardId, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cardId = cardId;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Account acc;</span><br><span class="line"></span><br><span class="line">    DrawThread(Account acc, String name) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.acc = acc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        acc.drawMoney(<span class="number">100000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：解决线程安全问题的方案</span></span><br><span class="line"><span class="comment">核心思想：让多个线程实现先后依次访问共享资源，这样就可以解决安全问题</span></span><br><span class="line"><span class="comment">做法：把共享资源上锁，每次只能一个线程进入访问完毕后，其他线程才能进来。</span></span><br><span class="line"><span class="comment">线程同步的方式有三种:</span></span><br><span class="line"><span class="comment">1.同步代码块</span></span><br><span class="line"><span class="comment">2.同步方法</span></span><br><span class="line"><span class="comment">3.lock显示锁</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作用：把出现线程安全问题的核心代码上锁，每次只能一个线程进入执行完毕后自动解锁，其他线程才可以进来执行</span></span><br><span class="line"><span class="comment">// 格式：</span></span><br><span class="line"><span class="keyword">synchronized</span>(锁对象) &#123;</span><br><span class="line">    <span class="comment">// 访问共享资源的核心代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">锁对象：理论上可以是任意的“唯一”对象即可。</span></span><br><span class="line"><span class="comment">原则上：锁对象建议使用共享资源。</span></span><br><span class="line"><span class="comment">——在实例方法中建议用this作为锁对象，此时this正好是共享资源！</span></span><br><span class="line"><span class="comment">——子啊静态方法中建议用类名.class字节码作为锁对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 安全问题主要出现在取钱方法中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cardId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawMoney</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 是谁来取钱</span></span><br><span class="line">        String name = Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.只需为核心代码上锁即可</span></span><br><span class="line">       <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果余额足够进行取钱</span></span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">this</span>.money &gt;= money) &#123;</span><br><span class="line">               System.out.println(name + <span class="string">&quot;来取钱,余额充足吐出&quot;</span> + money);</span><br><span class="line">               <span class="keyword">this</span>.money -= money;</span><br><span class="line">               <span class="comment">// 输出余额</span></span><br><span class="line">               System.out.println(name + <span class="string">&quot;来取钱,余额剩余：&quot;</span> + <span class="keyword">this</span>.money);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;余额不足&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(String cardId, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cardId = cardId;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">作用：把出现线程问题的核心方法给锁起来</span></span><br><span class="line"><span class="comment">用法：直接给方法加上一个Synchronized</span></span><br><span class="line"><span class="comment">原理：同步方法的原理和同步代码块的底层原理其实是完全一样的，只是同步方法是吧整个方法的代码都锁起来</span></span><br><span class="line"><span class="comment">同步方法的底层也是有锁对象的：</span></span><br><span class="line"><span class="comment">如果方法是实例方法：同步方法默认用this作为锁的对象</span></span><br><span class="line"><span class="comment">如果方法是静态方法：同步方法默认用类名.class作为锁的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 加上修饰符即可</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Synchronized <span class="keyword">void</span> <span class="title">drawMoney</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注意：在使用Lock锁的使用一定要注意异常机制，否则一旦上了锁又出现了异常则永远无法解锁</span></span><br><span class="line"><span class="comment">建议使用：</span></span><br><span class="line"><span class="comment">try&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;finally&#123;</span></span><br><span class="line"><span class="comment">// 必须执行</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>; <span class="comment">// 加同步锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>; <span class="comment">// 释放同步锁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cardId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> money;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock(); <span class="comment">// 创建一个Lock锁</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawMoney</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 是谁来取钱</span></span><br><span class="line">        String name = Thread.currentThread().getName();</span><br><span class="line">        lock.lock(); <span class="comment">// 1.上锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 如果余额足够进行取钱</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.money &gt;= money) &#123;</span><br><span class="line">                System.out.println(name + <span class="string">&quot;来取钱,余额充足吐出&quot;</span> + money);</span><br><span class="line">                <span class="keyword">this</span>.money -= money;</span><br><span class="line">                <span class="comment">// 输出余额</span></span><br><span class="line">                System.out.println(name + <span class="string">&quot;来取钱,余额剩余：&quot;</span> + <span class="keyword">this</span>.money);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(name + <span class="string">&quot;余额不足&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock(); <span class="comment">// 2.解锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>线程安全，性能差</p><p>线程不安全性能好，假如开发中不会存在多线程安全问题，建议使用线程不安全的设计类。</p><p>如：</p><p>StringBuilder：线程不安全</p><p>StringBuffer：线程安全(淘汰)</p><h1 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h1><p>模拟案例：</p><p>​    小明和小红有一个共同账号：共享资源</p><p>​    他们有3个爸爸(干爹、岳父、亲爸)给他们存钱。</p><p>模型：</p><p>​    小明和小红去取钱，如果有钱就取，然后自己等待，唤醒三个爸爸们来存钱。</p><p>​    他们的爸爸们来存钱，如果发现有钱就不存没钱就存钱，然后等待自己，唤醒孩子们来取钱。</p><p>​    做整存整取100000</p><p>分析：</p><p>​    生产者线程：亲爸、干爹、岳父</p><p>​    消费线程：小明，小红</p><p>​    共享资源：账户对象</p><p>注意：</p><p>​    线程通信一定是多个线程在操作同一个资源才需要通信</p><p>​    线程通信必须保证线程安全，否则毫无意义，代码也会报错！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 线程通信核心方法：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span></span>; <span class="comment">// 让当前线程进入到等待状态，此方法必须锁对象调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span>; <span class="comment">// 唤醒当前锁对象上等待状态的某个线程，此方法必须锁对象调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifAll</span><span class="params">()</span></span>; <span class="comment">// 唤醒当前锁对象上等待的全部线程，此方法必须锁对象调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 账户类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cardId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> money;</span><br><span class="line"><span class="comment">// 存钱机制</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">SaveMoney</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        String name = Thread.currentThread().getName();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.money &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 余额充足</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                 <span class="comment">// 一定要先唤醒别人在暂停自己，否则永远唤醒不了别人</span></span><br><span class="line">                <span class="keyword">this</span>.notifyAll(); <span class="comment">// 唤醒别人</span></span><br><span class="line">                <span class="keyword">this</span>.wait(); <span class="comment">// 暂停自己</span></span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 余额不足</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.money += money;</span><br><span class="line">                System.out.println(name + <span class="string">&quot;存钱&quot;</span> + <span class="string">&quot;余额为：&quot;</span> + <span class="keyword">this</span>.money);</span><br><span class="line">                <span class="keyword">this</span>.notifyAll(); <span class="comment">// 唤醒别人</span></span><br><span class="line">                <span class="keyword">this</span>.wait(); <span class="comment">// 暂停自己</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 取钱机制</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">drawMoney</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        String name = Thread.currentThread().getName();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.money &gt;= money) &#123;</span><br><span class="line">            <span class="comment">// 可以取钱</span></span><br><span class="line">            <span class="keyword">this</span>.money -= money;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;来取钱,吐出&quot;</span> + money + <span class="string">&quot;余额剩余&quot;</span> + <span class="keyword">this</span>.money);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.notifyAll(); <span class="comment">// 唤醒别人</span></span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 余额不足</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.notifyAll(); <span class="comment">// 唤醒别人</span></span><br><span class="line">                <span class="keyword">this</span>.wait(); <span class="comment">// 暂停自己</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(String cardId, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cardId = cardId;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 小明小红取钱</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Account acc;</span><br><span class="line"></span><br><span class="line">    DrawThread(Account acc, String name) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.acc = acc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>); <span class="comment">// 3秒钟暂停</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            acc.drawMoney(<span class="number">10000</span>); <span class="comment">// 取钱</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 干爹、亲爹和岳父存钱</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaveThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Account acc;</span><br><span class="line"></span><br><span class="line">    SaveThread(Account acc, String name) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.acc = acc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            acc.SaveMoney(<span class="number">10000</span>); <span class="comment">// 存钱</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 主方法运行</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Account acc = <span class="keyword">new</span> Account(<span class="string">&quot;ICBC-111&quot;</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> DrawThread(acc,<span class="string">&quot;小明&quot;</span>).start();</span><br><span class="line">    <span class="keyword">new</span> DrawThread(acc,<span class="string">&quot;小红&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> SaveThread(acc,<span class="string">&quot;干爹&quot;</span>).start();</span><br><span class="line">    <span class="keyword">new</span> SaveThread(acc,<span class="string">&quot;岳父&quot;</span>).start();</span><br><span class="line">    <span class="keyword">new</span> SaveThread(acc,<span class="string">&quot;亲爹&quot;</span>).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 线程池在Java中的代表累：ExecutorService(接口)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// java在Executors类下提供了一个静态方法得到一个线程池对象：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorSerVice <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nthreads)</span></span>; <span class="comment">// 创建一个线程池返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ExecutorService提交线程任务对象的执行方法：</span></span><br><span class="line"><span class="number">1.</span> Future&lt;?&gt; submit(Runnable task); <span class="comment">// 提交一个Runnable的任务对象给线程池执行。</span></span><br><span class="line"><span class="number">2.</span> Future&lt;?&gt; submit(Callable task); <span class="comment">// 提交一个Runnable的任务对象给线程池执行。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>; <span class="comment">// 执行所有线程后关闭线程池</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdownNow</span><span class="params">()</span></span>; <span class="comment">// 关闭线程池</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个线程池 允许存在三个线程</span></span><br><span class="line">    ExecutorService pool = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 创建一个线程</span></span><br><span class="line">    Runnable target = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">    pool.submit(target); <span class="comment">// 提交任务创建一个新线程</span></span><br><span class="line">    pool.submit(target); <span class="comment">// 提交任务创建一个新线程</span></span><br><span class="line">    pool.submit(target); <span class="comment">// 提交任务创建一个新线程</span></span><br><span class="line">    pool.submit(target); <span class="comment">// 复用上面的其中一个线程</span></span><br><span class="line">    pool.shutdown(); <span class="comment">// 线程执行完毕后关闭线程池</span></span><br><span class="line"><span class="comment">//        pool.shutdownNow(); // 直接关闭线程池关闭线程池</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用Callable创建</span></span><br><span class="line">    ExecutorService pools = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 提交Callable任务对象返回一个Future未来任务对象</span></span><br><span class="line">    Future&lt;String&gt; t1 = pools.submit(<span class="keyword">new</span> MyCallable(<span class="number">100</span>));</span><br><span class="line">    Future&lt;String&gt; t2 = pools.submit(<span class="keyword">new</span> MyCallable(<span class="number">200</span>));</span><br><span class="line">    Future&lt;String&gt; t3 = pools.submit(<span class="keyword">new</span> MyCallable(<span class="number">300</span>));</span><br><span class="line">    Future&lt;String&gt; t4 = pools.submit(<span class="keyword">new</span> MyCallable(<span class="number">400</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(t1.get());</span><br><span class="line">        System.out.println(t2.get());</span><br><span class="line">        System.out.println(t3.get());</span><br><span class="line">        System.out.println(t4.get());</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出1-n的和返回</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">    MyCallable(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread().getName() + <span class="string">&quot;--&gt;&quot;</span> + sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>死锁是一种情形：多个线程同时被阻塞，他们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此不可能正常终止。</p><p>Java死锁产生的四个必要条件：</p><p>​    1.互斥使用，即当资源被一个线程使用(占有)时，别的线程不能使用</p><p>​    2.不可抢占，资源请求者不能强制从资源占有者手中夺取资源，资源只能是由资源占有者主动释放。</p><p>​    3.请求和保持，即当资源请求者在请求其他的资源的同时保持对原有资源的占有。</p><p>​    4.循环等待，即存在一个等待循环队列：p1要p2的资源，p2要p1的资源，这样就形成了一个等待环路。</p><p>当满足四个条件后便形成死锁，打破任何一个条件便可让死锁消失</p><p>——死锁代码形式上通常需要进行锁的嵌套访问！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object resource01 = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object resource02 = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建线程1</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (resource01) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程1占用资源1请求资源2&quot;</span>);</span><br><span class="line">                    <span class="comment">// 占用资源1后马上进行休眠1秒，这时会执行线程2而线程1被锁，形成死锁</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">synchronized</span> (resource02) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;线程1成功占用资源2&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"><span class="comment">// 创建线程2</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (resource02) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程2占用资源2请求资源1&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">synchronized</span> (resource01) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;线程2成功占用资源1&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h1><h2 id="不可见问题"><a href="#不可见问题" class="headerlink" title="不可见问题"></a>不可见问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 并发编程下，多线程访问变量的不可见性问题</span></span><br><span class="line"><span class="comment">// 多个线程访问共享变量，会出现一个线程修改变量的之后，其他线程看不到最最新值的情况</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDome01</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;flag = &quot;</span> + flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VisibleDome</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VolatileDome01 t1 = <span class="keyword">new</span> VolatileDome01();</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t1.isFlag()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;flag被改变&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>每个线程都有自己的工作内存，线程都是从主内存拷贝共享变量的副本值。</p><p>每个线程都是在自己的工作内存中操作共享变量的。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.加锁</span></span><br><span class="line"><span class="comment">每次加锁会清空线程自己的工作内存，从新读取主内存最新值</span></span><br><span class="line"><span class="comment">2.对共享的变量进行volatile关键字修饰</span></span><br><span class="line"><span class="comment">volatile修饰的变量可以在多线程并发修改下，现实线程间变量的可见性</span></span><br><span class="line"><span class="comment">一旦一个线程修改了volatile修饰的变量，另一个线程可以立即取到最新值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.加锁</span></span><br><span class="line"><span class="keyword">synchronized</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t1.isFlag()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;flag被改变&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.修饰</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>volatile只能修饰实例变量和类变量，而synchronized可以修饰方法，以及代码块。</p><p>volatile保证数据的可见性，但是不保证原子性(多线程进行写操作，不保证线程安全)；但是synchronized是一种排他(互斥)的机制</p><h1 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h1><p>原子性是指：一批操作是一个整体，要么同时成功，要么同时失败，不能被干扰。</p><p>volatile只能保证线程间变量的可见性，但是不能保证变量操作的原子性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多次执行发现并没有达到想要的结果</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Runnable target = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(target).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            System.out.println(<span class="string">&quot;count ==&gt;&quot;</span> + count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="保证原子性"><a href="#保证原子性" class="headerlink" title="保证原子性"></a>保证原子性</h2><h3 id="加锁-悲观锁"><a href="#加锁-悲观锁" class="headerlink" title="加锁(悲观锁)"></a>加锁(悲观锁)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加锁</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="string">&quot;laoda&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                System.out.println(<span class="string">&quot;count ==&gt;&quot;</span> + count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="原子类-乐观锁"><a href="#原子类-乐观锁" class="headerlink" title="原子类(乐观锁)"></a>原子类(乐观锁)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建原子类</span></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger; <span class="comment">// 导包格式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>; <span class="comment">// 获取值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span></span>; <span class="comment">// 以原子的方式将当前值加1(先返回在自增)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">IncrementAndGet</span><span class="params">()</span></span>; <span class="comment">// 以原子的方式将当前值加1(先自增在返回)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addAndGet</span><span class="params">(<span class="keyword">int</span> delta)</span></span>; <span class="comment">//以原子的方式将给定的值自增在返回</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAndAdd</span><span class="params">(<span class="keyword">int</span> value)</span></span>; <span class="comment">// 以原子的方式返回后在自增给定的值</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable02</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;count ==&gt;&quot;</span> + count.incrementAndGet());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="乐观与悲观"><a href="#乐观与悲观" class="headerlink" title="乐观与悲观"></a>乐观与悲观</h3><p><strong>CAS于Synchronized：乐观，悲观锁</strong></p><p>CAS和Synchronized都可以保证多线程环境下共享数据的安全行。</p><p>区别：</p><p>Synchronized是从悲观的角度触发(悲观锁)</p><p>总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人拿这个数据就会阻塞直到它拿到锁</p><p>(共享资源每次只给一个线程使用，其他线程阻塞，用完后再把资源转让给其它线程)因此Synchronized我们也称为悲观锁。jdk中的ReentrantLock也是一种悲观锁。性能较差！！！</p><p>CAS是从乐观的角度出发</p><p>总是假设最好的情况，每次去拿数据的时候认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据。</p><p>CAS这种机制我们也可以将其称为乐观锁，综合性能较好。</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>为什么使用原子类可以保证原子性操作，且性能好线程安全呢？</p><p>底层基于CAS乐观锁机制，每次修改数据不会加锁，等到修改的时候判断有没有被别人修改过。如果修改了这次修改作废</p><h1 id="并发包"><a href="#并发包" class="headerlink" title="并发包"></a>并发包</h1><p>Map集合中的经典集合：HashMap它是”线程不安全”的，性能好</p><p>​    ——如果在要求线程安全的业务情况下就不能用这个集合做Map集合，否则业务会崩溃</p><p>为了保证线程安全，可以使用Hashtable</p><p>​    ——Hashtable是线程安全的Map集合，由于每一种方法都上了锁导致在同一时刻只能允许一种操作所以效率低，已经被淘汰</p><p>为了保证线程安全，还可以使用ConcurrentHashMap</p><p>​    ——ConcurrentHashMap分段锁，只锁自己操作的元素位置，效率高性能好，最新最好用。</p><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Hashtable; <span class="comment">// Hashtable导包格式</span></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap; <span class="comment">// 并发包ConcurrentHashMap导包格式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentHashMapDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable target = <span class="keyword">new</span> NewRunnable01();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(target,<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(target,<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t1.join(); <span class="comment">// 在执行过程中，主线程不能竞争t1的cpu</span></span><br><span class="line">            t2.join(); <span class="comment">// 在执行过程中，主线程不能竞争t2的cpu</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;maps的大小为：&quot;</span> +NewRunnable01.maps.size()); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewRunnable01</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String,String&gt; maps = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// 线程不安全</span></span><br><span class="line">    <span class="comment">//public static Map&lt;String,String&gt; maps = new HashMap&lt;&gt;(); // 线程安全效率低被淘汰</span></span><br><span class="line">    <span class="comment">//public static Map&lt;String,String&gt; maps = new ConcurrentHashMap&lt;&gt;(); // 线程安全综合新能高</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">500000</span>;i++) &#123;</span><br><span class="line">            maps.put(Thread.currentThread().getName() + i,Thread.currentThread().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p>线程通信的解决方法二</p><p>案例：</p><p>​    线程A输出A，B。线程B输出C</p><p>要求：</p><p>​    输出A后暂停线程A在输出B然后输出C</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch; <span class="comment">// 导包格式</span></span><br><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CountDownLatch</span><span class="params">(<span class="keyword">int</span> count)</span></span>; <span class="comment">// 创建一个count次的计数器</span></span><br><span class="line"><span class="comment">// 常用方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException <span class="comment">// 让当前线程等待，必须count为0才能被唤醒</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countDown</span><span class="params">()</span></span>; <span class="comment">// 减少锁存器的计数，如果计数达到零，释放所有等待的线程。  </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个线程监视器用于监视线程AB的执行情况</span></span><br><span class="line">        <span class="comment">// 1为暂停时需要1个操作步骤</span></span><br><span class="line">        CountDownLatch c = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span><span class="comment">/*计数器*/</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> ThreadA(c).start();</span><br><span class="line">        <span class="keyword">new</span> ThreadB(c).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> CountDownLatch c;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(CountDownLatch c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c.await(); <span class="comment">// 等待自己让出cpu</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> CountDownLatch c;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadB</span><span class="params">(CountDownLatch c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        c.countDown(); <span class="comment">// 让监督者的计数器减1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><p>案例：有5个员工进入会议室开会</p><p>要求：必须5个员工全部进入会议室以后才可以进行开会</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier; <span class="comment">// 导包格式</span></span><br><span class="line"><span class="comment">// 构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrier</span><span class="params">(<span class="keyword">int</span> parties, Runnable barrierAction)</span></span>; <span class="comment">// 用于在线程达到屏障时，优先执行</span></span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">await</span><span class="params">()</span></span>; <span class="comment">// 每个线程调用await方法后告诉CyclicBarrier我已经到达屏障，当前线程被回收</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个屏障</span></span><br><span class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">5</span>,<span class="keyword">new</span> meeting());</span><br><span class="line">        <span class="comment">// 创建五个员工线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Employee(<span class="string">&quot;员工&quot;</span> + i ,cyclicBarrier).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">meeting</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() +  <span class="string">&quot;会议开始&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> CyclicBarrier cyclicBarrier;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name , CyclicBarrier cyclicBarrier)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.cyclicBarrier = cyclicBarrier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;进入会议室&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 每个线程调用await方法后告诉CyclicBarrier我已经到达屏障，当前线程被回收</span></span><br><span class="line">            cyclicBarrier.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>案例：</p><p>​    创建5个线程并限制每次只能有2个线程执行服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore; <span class="comment">// 导包格式</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Semaphore(发信号)主要作用时控制线程的并发数量</span></span><br><span class="line"><span class="comment">synchronized可以起到&quot;锁的作用&quot;，但某个时间段内，只能一个线程执行</span></span><br><span class="line"><span class="comment">Semaphore可以设置同时允许几个线程执行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Semaphore</span><span class="params">(<span class="keyword">int</span> permits)</span></span>; <span class="comment">// permits表示许可线程的数量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Semaphore</span><span class="params">(<span class="keyword">int</span> permits, <span class="keyword">boolean</span> fair)</span></span>; <span class="comment">// fair表示公平性，如果设置为true那么下一次第一个执行的线程为上一次最后一次执行完的线程。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>; <span class="comment">// 表示获取许可</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span></span>; <span class="comment">// </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Service service = <span class="keyword">new</span> Service();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> MyThread(service).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Service service = <span class="keyword">new</span> Service();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(Service service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        service.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 业务代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            semaphore.acquire(); <span class="comment">// 加锁</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;开始时间&quot;</span></span><br><span class="line">                    + System.currentTimeMillis());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;登录成功！！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;结束时间&quot;</span></span><br><span class="line">                    + System.currentTimeMillis());</span><br><span class="line">            semaphore.release(); <span class="comment">// 解锁</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Exchanger"><a href="#Exchanger" class="headerlink" title="Exchanger"></a>Exchanger</h2><p>案例：</p><p>​    男孩女孩交换定情信物</p><p>要求：</p><p>​    男孩线程制作定情信物</p><p>​    女孩线程制作定情信物</p><p>​    创建Exchanger媒婆交换信物</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Exchanger; <span class="comment">// 导包格式</span></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit; <span class="comment">// 时间格式</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Exchanger交换者：是一个用于线程间协作的工具类，用于进行线程间的数据交换。如果第一个线程先执行exchange()方法，它会一直等待第二个线程也执行exchange方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Exchanger</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">exchange</span><span class="params">(V x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">exchange</span><span class="params">(V x, <span class="keyword">long</span> timeout, TimeUnit unit)</span></span>; <span class="comment">// 在规定时间内如果第二个线程还没有执行exchange方法则线程自动死亡 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExchangeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Exchanger&lt;String&gt; meiPo = <span class="keyword">new</span> Exchanger&lt;&gt;();</span><br><span class="line">        <span class="keyword">new</span> Boy(meiPo).start();</span><br><span class="line">        <span class="keyword">new</span> Girl(meiPo).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Exchanger&lt;String&gt; meiPo = <span class="keyword">new</span> Exchanger&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Boy</span><span class="params">(Exchanger&lt;String&gt; meiPo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.meiPo = meiPo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;男孩做好定情信物：同心匙🔑&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String str = meiPo.exchange(<span class="string">&quot;同心匙🔑&quot;</span>);</span><br><span class="line">            <span class="comment">// 等待5秒 TimeoutException时间超出异常</span></span><br><span class="line">            <span class="comment">//String str = meiPo.exchange(&quot;同心匙🔑&quot;,5, TimeUnit.SECONDS);</span></span><br><span class="line">            System.out.println(<span class="string">&quot;男孩得到定情信物：&quot;</span> + str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Exchanger&lt;String&gt; meiPo = <span class="keyword">new</span> Exchanger&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Girl</span><span class="params">(Exchanger&lt;String&gt; meiPo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.meiPo = meiPo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">        System.out.println(<span class="string">&quot;女孩做好定情信物：同心锁🔒&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//Thread.sleep(6000); // 休眠6秒</span></span><br><span class="line">            String str = meiPo.exchange(<span class="string">&quot;同心锁🔒&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;女孩得到定情信物：&quot;</span> + str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="http://raint9.tk/tags/Java/">Java</category>
      
      <category domain="http://raint9.tk/tags/%E8%8F%8A%E4%B8%B8%E6%A0%97%E5%AD%90/">菊丸栗子</category>
      
      
      <comments>http://raint9.tk/2021/03/11/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>断言&amp;日志</title>
      <link>http://raint9.tk/2021/03/11/%E6%96%AD%E8%A8%80&amp;%E6%97%A5%E5%BF%97/</link>
      <guid>http://raint9.tk/2021/03/11/%E6%96%AD%E8%A8%80&amp;%E6%97%A5%E5%BF%97/</guid>
      <pubDate>Thu, 11 Mar 2021 13:08:16 GMT</pubDate>
      
      <description>这是一篇关于Java的断言日志的笔记，感谢好友菊丸栗子提供的帮助</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h1><p>断言（Assertion）是一种调试程序的方式。在Java中，使用<code>assert</code>关键字来实现断言。Java断言的特点是：断言失败时会抛出<code>AssertionError</code>，导致程序结束退出。因此，断言不能用于可恢复的程序错误，<strong>只应该用于开发和测试阶段</strong>。对于可恢复的程序错误，不应该使用断言。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x = Math.abs(-<span class="number">123.45</span>);</span><br><span class="line">    <span class="keyword">assert</span> x &gt;= <span class="number">0</span> : <span class="string">&quot;x must &gt;= 0&quot;</span>;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>assert x &gt;= 0 : &quot;x must &gt;= 0&quot;;</code>这句语句便是断言，断言条件<code>x &gt;= 0</code>预期为<code>true</code>。如果计算结果为<code>false</code>，则断言失败，抛出<code>AssertionError</code>。语句<code>&quot;x must &gt;= 0&quot;</code>时断言信息，就是说在断言失败的时候会带上消息<code>&quot;x must &gt;= 0&quot;</code>方便调试。</p><p>这是因为JVM默认关闭断言指令，即遇到<code>assert</code>语句就自动忽略了，不执行。</p><p>要执行<code>assert</code>语句，必须给Java虚拟机传递<code>-enableassertions</code>（可简写为<code>-ea</code>）参数启用断言。所以，上述程序必须在命令行下运行才有效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ java -ea Main.java</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.AssertionError</span><br><span class="line">at Main.main(Main.java:<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>还可以有选择地对特定地类启用断言，命令行参数是：<code>-ea:com.itranswarp.sample.Main</code>，表示只对<code>com.itranswarp.sample.Main</code>这个类启用断言。</p><p>或者对特定地包启用断言，命令行参数是：<code>-ea:com.itranswarp.sample...</code>（注意结尾有3个<code>.</code>），表示对<code>com.itranswarp.sample</code>这个包启动断言。</p><p>实际开发中，很少使用断言。更好的方法是编写单元测试，即<code>JUnit</code>的使用。</p><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="使用-JDK-Logging"><a href="#使用-JDK-Logging" class="headerlink" title="使用 JDK Logging"></a>使用 JDK Logging</h2><p>在编写程序的过程中，发现与预期结果不相符合，通常采用的做法使用输出语句<code>System.out.println()</code>进行针对性的修改，符合预期后再删除<code>System.out.println()</code>，但这又相当麻烦。于是出现<strong>日志</strong> </p><p>输出日志，而不是用<code>System.out.println()</code>，有以下几个好处：</p><ol><li>可以设置输出样式，避免自己每次都写<code>&quot;ERROR: &quot; + var</code>；</li><li>可以设置输出级别，禁止某些级别输出。例如，只输出错误日志；</li><li>可以被重定向到文件，这样可以在程序运行结束后查看日志；</li><li>可以按包名控制日志级别，只输出某些包打的日志；</li><li>…..等等</li></ol><h3 id="Java标准库内置了日志包java-util-logging"><a href="#Java标准库内置了日志包java-util-logging" class="headerlink" title="Java标准库内置了日志包java.util.logging"></a>Java标准库内置了日志包<code>java.util.logging</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Flanders</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Logger logger = Logger.getGlobal();</span><br><span class="line">        logger.info(<span class="string">&quot;Start process...&quot;</span>);</span><br><span class="line">        logger.warning(<span class="string">&quot;memory is running out...&quot;</span>);</span><br><span class="line">        logger.fine(<span class="string">&quot;ignored&quot;</span>);</span><br><span class="line">        logger.severe(<span class="string">&quot;process will be terminated&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span>月 <span class="number">10</span>, <span class="number">2020</span> <span class="number">1</span>:<span class="number">17</span>:<span class="number">18</span> 下午 com.company.Main main</span><br><span class="line">INFO: Start process...</span><br><span class="line"><span class="number">6</span>月 <span class="number">10</span>, <span class="number">2020</span> <span class="number">1</span>:<span class="number">17</span>:<span class="number">18</span> 下午 com.company.Main main</span><br><span class="line">WARNING: memory is running out...</span><br><span class="line"><span class="number">6</span>月 <span class="number">10</span>, <span class="number">2020</span> <span class="number">1</span>:<span class="number">17</span>:<span class="number">18</span> 下午 com.company.Main main</span><br><span class="line">SEVERE: process will be terminated</span><br></pre></td></tr></table></figure><p>使用日志最大的好处是，它自动打印了时间、调用类、调用方法等很多有用的信息。</p><p>再仔细观察发现，4条日志，只打印了3条，<code>logger.fine()</code>没有打印。这是因为，日志的输出可以设定级别。JDK的Logging定义了7个日志级别，从严重到普通：</p><ul><li><strong>SEVERE</strong></li><li><strong>WARNING</strong></li><li><strong>INFO</strong></li><li><strong>CONFIG</strong></li><li><strong>FINE</strong></li><li><strong>FINER</strong></li><li><strong>FINEST</strong></li></ul><p>因为默认级别是<code>INFO</code>，因此，<code>INFO</code>级别以下的日志，不会被打印出来。使用日志级别的好处在于，调整级别，就可以屏蔽掉很多调试相关的日志输出。</p><h3 id="使用Java标准库内置的Logging有以下局限："><a href="#使用Java标准库内置的Logging有以下局限：" class="headerlink" title="使用Java标准库内置的Logging有以下局限："></a>使用Java标准库内置的Logging有以下局限：</h3><p>Logging系统在JVM启动时读取配置文件并完成初始化，一旦开始运行<code>main()</code>方法，就无法修改配置；</p><p>配置不太方便，需要在JVM启动时传递参数<code>-Djava.util.logging.config.file=&lt;config-file-name&gt;</code>。</p><p>因此，Java标准库内置的Logging使用并不是非常广泛。</p><h2 id="使用Commons-Logging"><a href="#使用Commons-Logging" class="headerlink" title="使用Commons Logging"></a>使用Commons Logging</h2><p>和Java标准库提供的日志不同，<code>Commons Logging</code>是一个第三方日志库，它是由<code>Apache</code>创建的日志模块。</p><p><code>Commons Logging</code>的特色是，它可以挂接不同的日志系统，并通过配置文件指定挂接的日志系统。默认情况下，<code>Commons Loggin</code>自动搜索并使用<code>Log4j</code>（<code>Log4j</code>是另一个流行的日志系统），如果没有找到<code>Log4j</code>，再使用<code>JDK Logging</code>。</p><p>使用<code>Commons Logging</code>只需要和两个类打交道，并且只有两步：</p><p><strong>第一步，通过<code>LogFactory</code>获取<code>Log</code>类的实例；</strong> </p><p><strong>第二步，使用<code>Log</code>实例的方法打日志。</strong></p><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log; </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Log log = LogFactory.getLog(Main.class);</span><br><span class="line">        log.info(<span class="string">&quot;start...&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;end.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果</span></span><br><span class="line"><span class="comment">！！！需要进行导包操作才能输出结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">运行结果如下：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Mar 02, 2019 7:15:31 PM Main main</span></span><br><span class="line"><span class="comment">INFO: start...</span></span><br><span class="line"><span class="comment">Mar 02, 2019 7:15:31 PM Main main</span></span><br><span class="line"><span class="comment">WARNING: end.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>因为Commons Logging是一个第三方提供的库，</p><h3 id="导包过程："><a href="#导包过程：" class="headerlink" title="导包过程："></a>导包过程：</h3><p>先把它<a href="https://commons.apache.org/proper/commons-logging/download_logging.cgi">下载</a>下来。下载后，解压，找到<code>commons-logging-1.2.jar</code>这个文件，再把Java源码<code>Main.java</code>放到一个目录下，例如<code>work</code>目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">work</span><br><span class="line">│</span><br><span class="line">├─ commons-logging-1.2.jar</span><br><span class="line">│</span><br><span class="line">└─ Main.java</span><br></pre></td></tr></table></figure><p>然后用<code>javac</code>编译<code>Main.java</code>，编译的时候要指定<code>classpath</code>，不然编译器找不到我们引用的<code>org.apache.commons.logging</code>包。编译命令如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac <span class="literal">-cp</span> commons<span class="literal">-logging</span><span class="literal">-1</span>.<span class="number">2</span>.jar Main.java</span><br></pre></td></tr></table></figure><p>如果编译成功，那么当前目录下就会多出一个<code>Main.class</code>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">work</span><br><span class="line">│</span><br><span class="line">├─ commons-logging-1.2.jar</span><br><span class="line">│</span><br><span class="line">├─ Main.java</span><br><span class="line">│</span><br><span class="line">└─ Main.class</span><br></pre></td></tr></table></figure><p>现在可以执行这个<code>Main.class</code>，使用<code>java</code>命令，也必须指定<code>classpath</code>，命令如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java <span class="literal">-cp</span> .;commons<span class="literal">-logging</span><span class="literal">-1</span>.<span class="number">2</span>.jar Main</span><br></pre></td></tr></table></figure><p>注意到传入的<code>classpath</code>有两部分：一个是<code>.</code>，一个是<code>commons-logging-1.2.jar</code>，用<code>;</code>分割。<code>.</code>表示当前目录，如果没有这个<code>.</code>，JVM不会在当前目录搜索<code>Main.class</code>，就会报错。</p><p><code>Commons Logging</code>定义了6个日志级别：</p><ul><li><code>FATAL</code></li><li><code>ERROR</code></li><li><code>WARNING</code></li><li><code>INFO</code></li><li><code>DEBUG</code></li><li><code>TRACE</code></li></ul><p>默认级别是<code>INFO</code>。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li>在静态方法中使用：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(Main.class);</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;foo&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在实例方法中引入<code>Log</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Log log = LogFactory.getLog(getClass());</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到实例变量log的获取方式是<code>LogFactory.getLog(getClass())</code>，虽然也可以用<code>LogFactory.getLog(Person.class)</code>，但是前一种方式有个非常大的好处，就是子类可以直接使用该<code>log</code>实例。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在子类中使用父类实例化的log:</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于Java类的动态特性，子类获取的<code>log</code>字段实际上相当于<code>LogFactory.getLog(Student.class)</code>，但却是从父类继承而来，并且无需改动代码。</p><p>此外，Commons Logging的日志方法，例如<code>info()</code>，除了标准的<code>info(String)</code>外，还提供了一个非常有用的重载方法：<code>info(String, Throwable)</code>，这使得记录异常更加简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    log.error(<span class="string">&quot;got exception!&quot;</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面介绍了Commons Logging，可以作为“日志接口”来使用。而真正的“日志实现”可以使用Log4j。</p><p>Log4j是一种非常流行的日志框架，最新版本是2.x。</p><p>Log4j是一个组件化设计的日志系统，它的架构大致如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">log.info(&quot;User signed in.&quot;);</span><br><span class="line"> │</span><br><span class="line"> │   ┌──────────┐    ┌──────────┐    ┌──────────┐    ┌──────────┐</span><br><span class="line"> ├──&gt;│ Appender │───&gt;│  Filter  │───&gt;│  Layout  │───&gt;│ Console  │</span><br><span class="line"> │   └──────────┘    └──────────┘    └──────────┘    └──────────┘</span><br><span class="line"> │</span><br><span class="line"> │   ┌──────────┐    ┌──────────┐    ┌──────────┐    ┌──────────┐</span><br><span class="line"> ├──&gt;│ Appender │───&gt;│  Filter  │───&gt;│  Layout  │───&gt;│   File   │</span><br><span class="line"> │   └──────────┘    └──────────┘    └──────────┘    └──────────┘</span><br><span class="line"> │</span><br><span class="line"> │   ┌──────────┐    ┌──────────┐    ┌──────────┐    ┌──────────┐</span><br><span class="line"> └──&gt;│ Appender │───&gt;│  Filter  │───&gt;│  Layout  │───&gt;│  Socket  │</span><br><span class="line">     └──────────┘    └──────────┘    └──────────┘    └──────────┘</span><br></pre></td></tr></table></figure><h1 id="使用框架Log4j"><a href="#使用框架Log4j" class="headerlink" title="使用框架Log4j"></a>使用框架Log4j</h1><p>当我们使用<code>Log4j</code>输出一条日志时，<code>Log4j</code>自动通过不同的<code>Appender</code>把同一条日志输出到不同的目的地。例如：</p><ul><li><code>console</code>：输出到屏幕；</li><li><code>file</code>：输出到文件；</li><li><code>socket</code>：通过网络输出到远程计算机；</li><li><code>jdbc</code>：输出到数据库</li></ul><p>在输出日志的过程中，通过<code>Filter</code>来过滤哪些log需要被输出，哪些log不需要被输出。例如，仅输出<code>ERROR</code>级别的日志。</p><p>最后，通过Layout来格式化日志信息，例如，自动添加日期、时间、方法名称等信息。</p><p>上述结构虽然复杂，但我们在实际使用的时候，并不需要关心Log4j的API，而是通过配置文件来配置它。</p><h3 id="先从这里下载然后导入IDEA（导入有问题弃用）"><a href="#先从这里下载然后导入IDEA（导入有问题弃用）" class="headerlink" title="//先从这里下载然后导入IDEA（导入有问题弃用）"></a>//先从这里<a href="https://logging.apache.org/log4j/2.x/download.html">下载</a>然后导入IDEA（导入有问题弃用）</h3><p>解压后把以下3个jar包放到导入：</p><ul><li><code>log4j-api-2.x.jar</code></li><li><code>log4j-core-2.x.jar</code></li><li><code>log4j-jcl-2.x.jar</code></li></ul><p><img src="C:\Users\Flanders\AppData\Roaming\Typora\typora-user-images\image-20200610141512411.png" alt="image-20200610141512411"></p><p>点击<code>Alt</code> + <code>Ins</code></p><p><img src="C:\Users\Flanders\AppData\Roaming\Typora\typora-user-images\image-20200610141614792.png" alt="image-20200610141614792"></p><p>选择<code>1</code>或者<code>2</code>均可，便完成导入</p><p><img src="C:\Users\Flanders\AppData\Roaming\Typora\typora-user-images\image-20200610142155999.png" alt="image-20200610142155999"></p>]]></content:encoded>
      
      
      
      <category domain="http://raint9.tk/tags/Java/">Java</category>
      
      <category domain="http://raint9.tk/tags/%E8%8F%8A%E4%B8%B8%E6%A0%97%E5%AD%90/">菊丸栗子</category>
      
      
      <comments>http://raint9.tk/2021/03/11/%E6%96%AD%E8%A8%80&amp;%E6%97%A5%E5%BF%97/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>单例模式</title>
      <link>http://raint9.tk/2021/03/11/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <guid>http://raint9.tk/2021/03/11/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <pubDate>Thu, 11 Mar 2021 13:08:16 GMT</pubDate>
      
      <description>这是一篇关于Java单例模式的笔记，感谢好友菊丸栗子提供的帮助</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="什么是单例"><a href="#什么是单例" class="headerlink" title="什么是单例"></a>什么是单例</h2><p>一个类永远只有一个对象，不能创建多个对象</p><h2 id="为什么要用单例"><a href="#为什么要用单例" class="headerlink" title="为什么要用单例"></a>为什么要用单例</h2><p>开发中有很多类的对象我们只需要一个，如虚拟机对象！任务管理器对象！对象越多越占内存，有些时候需要一个对象就可以实现业务，单例可以节约内存，提高效率</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="饿汉单例设计模式"><a href="#饿汉单例设计模式" class="headerlink" title="饿汉单例设计模式"></a>饿汉单例设计模式</h3><p>——通过类获取单例对象的时候，对象以及提前做好了！</p><p>解释：一个非常饿汉希望去包子铺有现成的包子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleInstanceDome01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义一个对象接收单例对象，也可以类名直接点</span></span><br><span class="line">        SingleInstance01 s1 = SingleInstance01.getInstance(); </span><br><span class="line">        SingleInstance01 s2 = SingleInstance01.getInstance();</span><br><span class="line">        System.out.println(s1 == s2); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 饿汉单例设计类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleInstance01</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 2.定义一个静态变量存储一个变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingleInstance01 ins = <span class="keyword">new</span> SingleInstance01();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.把一个构造器私有，只能在类中实现</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleInstance01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.创建一个静态接口返回</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleInstance01 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ins;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="懒汉单例设计模式"><a href="#懒汉单例设计模式" class="headerlink" title="懒汉单例设计模式"></a>懒汉单例设计模式</h3><p>——通过类获取单例对象的时候，需要才创建对象</p><p>解释：一个懒汉只有想要吃包子的时候才去做</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleInstanceDome02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SingleInstance02 s1 = SingleInstance02.getInstance();</span><br><span class="line">        SingleInstance02 s2 = SingleInstance02.getInstance();</span><br><span class="line">        System.out.println(s1 == s2); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleInstance02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.定义一个静态变量不存储任何东西</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingleInstance02 ins;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.把一个构造器私有，只能在类中实现</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleInstance02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.创建一个静态接口进行判断需要的时候在创建</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleInstance02 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ins == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ins = <span class="keyword">new</span> SingleInstance02();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ins;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="http://raint9.tk/tags/Java/">Java</category>
      
      <category domain="http://raint9.tk/tags/%E8%8F%8A%E4%B8%B8%E6%A0%97%E5%AD%90/">菊丸栗子</category>
      
      
      <comments>http://raint9.tk/2021/03/11/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>错误</title>
      <link>http://raint9.tk/2021/03/11/%E9%94%99%E8%AF%AF/</link>
      <guid>http://raint9.tk/2021/03/11/%E9%94%99%E8%AF%AF/</guid>
      <pubDate>Thu, 11 Mar 2021 13:08:16 GMT</pubDate>
      
      <description>这是一篇关于Java错误篇的笔记，感谢好友菊丸栗子提供的帮助</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="类的实例化数组"><a href="#类的实例化数组" class="headerlink" title="类的实例化数组"></a>类的实例化数组</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类的实例化数组，每一个都需要单独创建</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    A[] array = <span class="keyword">new</span> A[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        array[i] = <span class="keyword">new</span> A();<span class="comment">//必须单独创建</span></span><br><span class="line">        array[i] = i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注意int-int的情况"><a href="#注意int-int的情况" class="headerlink" title="注意int/int的情况"></a>注意int/int的情况</h1>]]></content:encoded>
      
      
      
      <category domain="http://raint9.tk/tags/Java/">Java</category>
      
      <category domain="http://raint9.tk/tags/%E8%8F%8A%E4%B8%B8%E6%A0%97%E5%AD%90/">菊丸栗子</category>
      
      
      <comments>http://raint9.tk/2021/03/11/%E9%94%99%E8%AF%AF/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
